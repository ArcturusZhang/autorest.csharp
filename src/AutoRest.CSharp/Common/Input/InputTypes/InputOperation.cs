// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

using System;
using System.Collections.Generic;
using System.Linq;
using AutoRest.CSharp.Input;
using AutoRest.CSharp.Utilities;
using Azure;
using Azure.Core;

namespace AutoRest.CSharp.Common.Input;

internal record InputOperation(
    string Name,
    string? ResourceName,
    string? Summary,
    string? Deprecated,
    string Description,
    string? Accessibility,
    IReadOnlyList<InputParameter> Parameters,
    IReadOnlyList<OperationResponse> Responses,
    RequestMethod HttpMethod,
    BodyMediaType RequestBodyMediaType,
    string Uri,
    string Path,
    string? ExternalDocsUrl,
    IReadOnlyList<string>? RequestMediaTypes,
    bool BufferResponse,
    OperationLongRunning? LongRunning,
    OperationPaging? Paging,
    bool GenerateProtocolMethod,
    bool GenerateConvenienceMethod)
{
    public InputOperation() : this(
        Name: string.Empty,
        ResourceName: null,
        Summary: null,
        Deprecated: null,
        Description: string.Empty,
        Accessibility: null,
        Parameters: Array.Empty<InputParameter>(),
        Responses: Array.Empty<OperationResponse>(),
        HttpMethod: RequestMethod.Get,
        RequestBodyMediaType: BodyMediaType.None,
        Uri: string.Empty,
        Path: string.Empty,
        ExternalDocsUrl: null,
        RequestMediaTypes: Array.Empty<string>(),
        BufferResponse: false,
        LongRunning: null,
        Paging: null,
        GenerateProtocolMethod: true,
        GenerateConvenienceMethod: false)
    { }

    //private string? _cleanName;
    public string CleanName => Name.IsNullOrEmpty() ? string.Empty : Name.ToCleanName();
    //{
    //    get
    //    {
    //        if (_cleanName == null)
    //        {
    //            _cleanName = Name.IsNullOrEmpty() ? string.Empty : Name.ToCleanName();
    //        }

    //        return _cleanName;
    //    }
    //}

    public bool KeepClientDefaultValue { get; set; } = Configuration.MethodsToKeepClientDefaultValue.Contains(Name);

    // unfortunately this does not work
    // TODO temporary
    // I have to implement this by myself because the default Equals implementation generated by record keyword only compares the collections by the reference of the collections
    // ie it is comparing the `Parameters` property by calling `Parameters == other.Parameters` which is problematic since in some places we are putting it in a dictionary
    // Method generated by bing AI
    public virtual bool Equals(InputOperation? other)
    {
        if (other == null)
            return false;

        if ((RequestMediaTypes == null && other.RequestMediaTypes != null) || (RequestMediaTypes != null && (other.RequestMediaTypes == null || !RequestMediaTypes.SequenceEqual(other.RequestMediaTypes))))
            return false;

        return Name.Equals(other.Name) &&
               ResourceName == other.ResourceName &&
               Summary == other.Summary &&
               Deprecated == other.Deprecated &&
               Description.Equals(other.Description) &&
               Accessibility == other.Accessibility &&
               Parameters.SequenceEqual(other.Parameters) &&
               Responses.SequenceEqual(other.Responses) &&
               HttpMethod == other.HttpMethod &&
               RequestBodyMediaType == other.RequestBodyMediaType &&
               Uri.Equals(other.Uri) &&
               Path.Equals(other.Path) &&
               ExternalDocsUrl == other.ExternalDocsUrl &&
               BufferResponse == other.BufferResponse &&
               ((LongRunning == null && other.LongRunning == null) || (LongRunning != null && LongRunning.Equals(other.LongRunning))) &&
               ((Paging == null && other.Paging == null) || (Paging != null && Paging.Equals(other.Paging))) &&
               GenerateProtocolMethod == other.GenerateProtocolMethod &&
               GenerateConvenienceMethod == other.GenerateConvenienceMethod;
    }

    // Method generated by bing AI
    public override int GetHashCode()
    {
        var hashCode = new HashCode();
        hashCode.Add(Name);
        hashCode.Add(ResourceName);
        hashCode.Add(Summary);
        hashCode.Add(Deprecated);
        hashCode.Add(Description);
        hashCode.Add(Accessibility);
        hashCode.Add(Parameters);
        hashCode.Add(Responses);
        hashCode.Add(HttpMethod);
        hashCode.Add(RequestBodyMediaType);
        hashCode.Add(Uri);
        hashCode.Add(Path);
        hashCode.Add(ExternalDocsUrl);
        hashCode.Add(RequestMediaTypes);
        hashCode.Add(BufferResponse);
        hashCode.Add(LongRunning);
        hashCode.Add(Paging);
        hashCode.Add(GenerateProtocolMethod);
        hashCode.Add(GenerateConvenienceMethod);

        return hashCode.ToHashCode();
    }
}
