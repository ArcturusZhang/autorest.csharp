// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core.Pipeline;
using Azure.Management.Storage.Models;
using Azure.ResourceManager;
using Azure.ResourceManager.Core;

namespace Azure.Management.Storage
{
    /// <summary> A class representing collection of ImmutabilityPolicy and their operations over its parent. </summary>
    public partial class ImmutabilityPolicyContainer : ArmContainer
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly ImmutabilityPoliciesRestOperations _immutabilityPoliciesRestClient;

        /// <summary> Initializes a new instance of the <see cref="ImmutabilityPolicyContainer"/> class for mocking. </summary>
        protected ImmutabilityPolicyContainer()
        {
        }

        /// <summary> Initializes a new instance of ImmutabilityPolicyContainer class. </summary>
        /// <param name="parent"> The resource representing the parent resource. </param>
        internal ImmutabilityPolicyContainer(ArmResource parent) : base(parent)
        {
            _clientDiagnostics = new ClientDiagnostics(ClientOptions);
            _immutabilityPoliciesRestClient = new ImmutabilityPoliciesRestOperations(_clientDiagnostics, Pipeline, ClientOptions, Id.SubscriptionId, BaseUri);
        }

        /// <summary> Gets the valid resource type for this object. </summary>
        protected override ResourceType ValidResourceType => "Microsoft.Storage/storageAccounts/blobServices/containers";

        // Container level operations.

        /// <summary> Creates or updates an unlocked immutability policy. ETag in If-Match is honored if given but not required for this operation. </summary>
        /// <param name="immutabilityPolicyName"> The name of the blob container immutabilityPolicy within the specified storage account. ImmutabilityPolicy Name must be &apos;default&apos;. </param>
        /// <param name="ifMatch"> The entity state (ETag) version of the immutability policy to update. A value of &quot;*&quot; can be used to apply the operation only if the immutability policy already exists. If omitted, this operation will always be applied. </param>
        /// <param name="parameters"> The ImmutabilityPolicy Properties that will be created or updated to a blob container. </param>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual ImmutabilityPolicyCreateOrUpdateOperation CreateOrUpdate(Enum2 immutabilityPolicyName, string ifMatch = null, ImmutabilityPolicyData parameters = null, bool waitForCompletion = true, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ImmutabilityPolicyContainer.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = _immutabilityPoliciesRestClient.CreateOrUpdate(Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Name, immutabilityPolicyName, ifMatch, parameters, cancellationToken);
                var operation = new ImmutabilityPolicyCreateOrUpdateOperation(Parent, response);
                if (waitForCompletion)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Creates or updates an unlocked immutability policy. ETag in If-Match is honored if given but not required for this operation. </summary>
        /// <param name="immutabilityPolicyName"> The name of the blob container immutabilityPolicy within the specified storage account. ImmutabilityPolicy Name must be &apos;default&apos;. </param>
        /// <param name="ifMatch"> The entity state (ETag) version of the immutability policy to update. A value of &quot;*&quot; can be used to apply the operation only if the immutability policy already exists. If omitted, this operation will always be applied. </param>
        /// <param name="parameters"> The ImmutabilityPolicy Properties that will be created or updated to a blob container. </param>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async virtual Task<ImmutabilityPolicyCreateOrUpdateOperation> CreateOrUpdateAsync(Enum2 immutabilityPolicyName, string ifMatch = null, ImmutabilityPolicyData parameters = null, bool waitForCompletion = true, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ImmutabilityPolicyContainer.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = await _immutabilityPoliciesRestClient.CreateOrUpdateAsync(Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Name, immutabilityPolicyName, ifMatch, parameters, cancellationToken).ConfigureAwait(false);
                var operation = new ImmutabilityPolicyCreateOrUpdateOperation(Parent, response);
                if (waitForCompletion)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the existing immutability policy along with the corresponding ETag in response headers and body. </summary>
        /// <param name="immutabilityPolicyName"> The name of the blob container immutabilityPolicy within the specified storage account. ImmutabilityPolicy Name must be &apos;default&apos;. </param>
        /// <param name="ifMatch"> The entity state (ETag) version of the immutability policy to update. A value of &quot;*&quot; can be used to apply the operation only if the immutability policy already exists. If omitted, this operation will always be applied. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<ImmutabilityPolicy> Get(Enum2 immutabilityPolicyName, string ifMatch = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ImmutabilityPolicyContainer.Get");
            scope.Start();
            try
            {
                var response = _immutabilityPoliciesRestClient.Get(Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Name, immutabilityPolicyName, ifMatch, cancellationToken);
                if (response.Value == null)
                    throw _clientDiagnostics.CreateRequestFailedException(response.GetRawResponse());
                return Response.FromValue(new ImmutabilityPolicy(Parent, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the existing immutability policy along with the corresponding ETag in response headers and body. </summary>
        /// <param name="immutabilityPolicyName"> The name of the blob container immutabilityPolicy within the specified storage account. ImmutabilityPolicy Name must be &apos;default&apos;. </param>
        /// <param name="ifMatch"> The entity state (ETag) version of the immutability policy to update. A value of &quot;*&quot; can be used to apply the operation only if the immutability policy already exists. If omitted, this operation will always be applied. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async virtual Task<Response<ImmutabilityPolicy>> GetAsync(Enum2 immutabilityPolicyName, string ifMatch = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ImmutabilityPolicyContainer.Get");
            scope.Start();
            try
            {
                var response = await _immutabilityPoliciesRestClient.GetAsync(Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Name, immutabilityPolicyName, ifMatch, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(response.GetRawResponse()).ConfigureAwait(false);
                return Response.FromValue(new ImmutabilityPolicy(Parent, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="immutabilityPolicyName"> The name of the blob container immutabilityPolicy within the specified storage account. ImmutabilityPolicy Name must be &apos;default&apos;. </param>
        /// <param name="ifMatch"> The entity state (ETag) version of the immutability policy to update. A value of &quot;*&quot; can be used to apply the operation only if the immutability policy already exists. If omitted, this operation will always be applied. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<ImmutabilityPolicy> GetIfExists(Enum2 immutabilityPolicyName, string ifMatch = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ImmutabilityPolicyContainer.GetIfExists");
            scope.Start();
            try
            {
                var response = _immutabilityPoliciesRestClient.Get(Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Name, immutabilityPolicyName, ifMatch, cancellationToken: cancellationToken);
                return response.Value == null
                    ? Response.FromValue<ImmutabilityPolicy>(null, response.GetRawResponse())
                    : Response.FromValue(new ImmutabilityPolicy(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="immutabilityPolicyName"> The name of the blob container immutabilityPolicy within the specified storage account. ImmutabilityPolicy Name must be &apos;default&apos;. </param>
        /// <param name="ifMatch"> The entity state (ETag) version of the immutability policy to update. A value of &quot;*&quot; can be used to apply the operation only if the immutability policy already exists. If omitted, this operation will always be applied. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async virtual Task<Response<ImmutabilityPolicy>> GetIfExistsAsync(Enum2 immutabilityPolicyName, string ifMatch = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ImmutabilityPolicyContainer.GetIfExistsAsync");
            scope.Start();
            try
            {
                var response = await _immutabilityPoliciesRestClient.GetAsync(Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Name, immutabilityPolicyName, ifMatch, cancellationToken: cancellationToken).ConfigureAwait(false);
                return response.Value == null
                    ? Response.FromValue<ImmutabilityPolicy>(null, response.GetRawResponse())
                    : Response.FromValue(new ImmutabilityPolicy(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="immutabilityPolicyName"> The name of the blob container immutabilityPolicy within the specified storage account. ImmutabilityPolicy Name must be &apos;default&apos;. </param>
        /// <param name="ifMatch"> The entity state (ETag) version of the immutability policy to update. A value of &quot;*&quot; can be used to apply the operation only if the immutability policy already exists. If omitted, this operation will always be applied. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<bool> CheckIfExists(Enum2 immutabilityPolicyName, string ifMatch = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ImmutabilityPolicyContainer.CheckIfExists");
            scope.Start();
            try
            {
                var response = GetIfExists(immutabilityPolicyName, ifMatch, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="immutabilityPolicyName"> The name of the blob container immutabilityPolicy within the specified storage account. ImmutabilityPolicy Name must be &apos;default&apos;. </param>
        /// <param name="ifMatch"> The entity state (ETag) version of the immutability policy to update. A value of &quot;*&quot; can be used to apply the operation only if the immutability policy already exists. If omitted, this operation will always be applied. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async virtual Task<Response<bool>> CheckIfExistsAsync(Enum2 immutabilityPolicyName, string ifMatch = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ImmutabilityPolicyContainer.CheckIfExistsAsync");
            scope.Start();
            try
            {
                var response = await GetIfExistsAsync(immutabilityPolicyName, ifMatch, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        // Builders.
        // public ArmBuilder<Azure.ResourceManager.ResourceIdentifier, ImmutabilityPolicy, ImmutabilityPolicyData> Construct() { }
    }
}
