// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;

namespace multiple_inheritance.Models
{
    /// <summary> Model factory for read-only models. </summary>
    public static partial class MultipleInheritanceServiceModelFactory
    {
        /// <summary> Initializes a new instance of Horse. </summary>
        /// <param name="name"></param>
        /// <param name="isAShowHorse"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        /// <returns> A new <see cref="Models.Horse"/> instance for mocking. </returns>
        public static Horse Horse(string name = null, bool? isAShowHorse = null)
        {
            if (name == null)
            {
                throw new ArgumentNullException(nameof(name));
            }

            return new Horse(name, isAShowHorse);
        }

        /// <summary> Initializes a new instance of Feline. </summary>
        /// <param name="meows"></param>
        /// <param name="hisses"></param>
        /// <returns> A new <see cref="Models.Feline"/> instance for mocking. </returns>
        public static Feline Feline(bool? meows = null, bool? hisses = null)
        {
            return new Feline(meows, hisses);
        }

        /// <summary> Initializes a new instance of Cat. </summary>
        /// <param name="name"></param>
        /// <param name="likesMilk"></param>
        /// <param name="meows"></param>
        /// <param name="hisses"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        /// <returns> A new <see cref="Models.Cat"/> instance for mocking. </returns>
        public static Cat Cat(string name = null, bool? likesMilk = null, bool? meows = null, bool? hisses = null)
        {
            if (name == null)
            {
                throw new ArgumentNullException(nameof(name));
            }

            return new Cat(name, likesMilk, meows, hisses);
        }

        /// <summary> Initializes a new instance of Kitten. </summary>
        /// <param name="name"></param>
        /// <param name="likesMilk"></param>
        /// <param name="meows"></param>
        /// <param name="hisses"></param>
        /// <param name="eatsMiceYet"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        /// <returns> A new <see cref="Models.Kitten"/> instance for mocking. </returns>
        public static Kitten Kitten(string name = null, bool? likesMilk = null, bool? meows = null, bool? hisses = null, bool? eatsMiceYet = null)
        {
            if (name == null)
            {
                throw new ArgumentNullException(nameof(name));
            }

            return new Kitten(name, likesMilk, meows, hisses, eatsMiceYet);
        }
    }
}
