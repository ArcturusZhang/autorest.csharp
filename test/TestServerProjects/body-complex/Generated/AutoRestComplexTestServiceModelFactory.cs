// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace body_complex.Models
{
    /// <summary> Model factory for read-only models. </summary>
    public static partial class AutoRestComplexTestServiceModelFactory
    {
        /// <summary> Initializes a new instance of Basic. </summary>
        /// <param name="id"> Basic Id. </param>
        /// <param name="name"> Name property with a very long description that does not fit on a single line and a line break. </param>
        /// <param name="color"></param>
        /// <returns> A new <see cref="Models.Basic"/> instance for mocking. </returns>
        public static Basic Basic(int? id = null, string name = null, CMYKColors? color = null)
        {
            return new Basic(id, name, color);
        }

        /// <summary> Initializes a new instance of IntWrapper. </summary>
        /// <param name="field1"></param>
        /// <param name="field2"></param>
        /// <returns> A new <see cref="Models.IntWrapper"/> instance for mocking. </returns>
        public static IntWrapper IntWrapper(int? field1 = null, int? field2 = null)
        {
            return new IntWrapper(field1, field2);
        }

        /// <summary> Initializes a new instance of LongWrapper. </summary>
        /// <param name="field1"></param>
        /// <param name="field2"></param>
        /// <returns> A new <see cref="Models.LongWrapper"/> instance for mocking. </returns>
        public static LongWrapper LongWrapper(long? field1 = null, long? field2 = null)
        {
            return new LongWrapper(field1, field2);
        }

        /// <summary> Initializes a new instance of FloatWrapper. </summary>
        /// <param name="field1"></param>
        /// <param name="field2"></param>
        /// <returns> A new <see cref="Models.FloatWrapper"/> instance for mocking. </returns>
        public static FloatWrapper FloatWrapper(float? field1 = null, float? field2 = null)
        {
            return new FloatWrapper(field1, field2);
        }

        /// <summary> Initializes a new instance of DoubleWrapper. </summary>
        /// <param name="field1"></param>
        /// <param name="field56ZerosAfterTheDotAndNegativeZeroBeforeDotAndThisIsALongFieldNameOnPurpose"></param>
        /// <returns> A new <see cref="Models.DoubleWrapper"/> instance for mocking. </returns>
        public static DoubleWrapper DoubleWrapper(double? field1 = null, double? field56ZerosAfterTheDotAndNegativeZeroBeforeDotAndThisIsALongFieldNameOnPurpose = null)
        {
            return new DoubleWrapper(field1, field56ZerosAfterTheDotAndNegativeZeroBeforeDotAndThisIsALongFieldNameOnPurpose);
        }

        /// <summary> Initializes a new instance of BooleanWrapper. </summary>
        /// <param name="fieldTrue"></param>
        /// <param name="fieldFalse"></param>
        /// <returns> A new <see cref="Models.BooleanWrapper"/> instance for mocking. </returns>
        public static BooleanWrapper BooleanWrapper(bool? fieldTrue = null, bool? fieldFalse = null)
        {
            return new BooleanWrapper(fieldTrue, fieldFalse);
        }

        /// <summary> Initializes a new instance of StringWrapper. </summary>
        /// <param name="field"></param>
        /// <param name="empty"></param>
        /// <param name="nullProperty"></param>
        /// <returns> A new <see cref="Models.StringWrapper"/> instance for mocking. </returns>
        public static StringWrapper StringWrapper(string field = null, string empty = null, string nullProperty = null)
        {
            return new StringWrapper(field, empty, nullProperty);
        }

        /// <summary> Initializes a new instance of DateWrapper. </summary>
        /// <param name="field"></param>
        /// <param name="leap"></param>
        /// <returns> A new <see cref="Models.DateWrapper"/> instance for mocking. </returns>
        public static DateWrapper DateWrapper(DateTimeOffset? field = null, DateTimeOffset? leap = null)
        {
            return new DateWrapper(field, leap);
        }

        /// <summary> Initializes a new instance of DatetimeWrapper. </summary>
        /// <param name="field"></param>
        /// <param name="now"></param>
        /// <returns> A new <see cref="Models.DatetimeWrapper"/> instance for mocking. </returns>
        public static DatetimeWrapper DatetimeWrapper(DateTimeOffset? field = null, DateTimeOffset? now = null)
        {
            return new DatetimeWrapper(field, now);
        }

        /// <summary> Initializes a new instance of Datetimerfc1123Wrapper. </summary>
        /// <param name="field"></param>
        /// <param name="now"></param>
        /// <returns> A new <see cref="Models.Datetimerfc1123Wrapper"/> instance for mocking. </returns>
        public static Datetimerfc1123Wrapper Datetimerfc1123Wrapper(DateTimeOffset? field = null, DateTimeOffset? now = null)
        {
            return new Datetimerfc1123Wrapper(field, now);
        }

        /// <summary> Initializes a new instance of DurationWrapper. </summary>
        /// <param name="field"></param>
        /// <returns> A new <see cref="Models.DurationWrapper"/> instance for mocking. </returns>
        public static DurationWrapper DurationWrapper(TimeSpan? field = null)
        {
            return new DurationWrapper(field);
        }

        /// <summary> Initializes a new instance of ByteWrapper. </summary>
        /// <param name="field"></param>
        /// <returns> A new <see cref="Models.ByteWrapper"/> instance for mocking. </returns>
        public static ByteWrapper ByteWrapper(byte[] field = null)
        {
            return new ByteWrapper(field);
        }

        /// <summary> Initializes a new instance of ArrayWrapper. </summary>
        /// <param name="array"></param>
        /// <returns> A new <see cref="Models.ArrayWrapper"/> instance for mocking. </returns>
        public static ArrayWrapper ArrayWrapper(IEnumerable<string> array = null)
        {
            array ??= new List<string>();

            return new ArrayWrapper(array?.ToList());
        }

        /// <summary> Initializes a new instance of DictionaryWrapper. </summary>
        /// <param name="defaultProgram"> Dictionary of &lt;string&gt;. </param>
        /// <returns> A new <see cref="Models.DictionaryWrapper"/> instance for mocking. </returns>
        public static DictionaryWrapper DictionaryWrapper(IDictionary<string, string> defaultProgram = null)
        {
            defaultProgram ??= new Dictionary<string, string>();

            return new DictionaryWrapper(defaultProgram);
        }

        /// <summary> Initializes a new instance of Siamese. </summary>
        /// <param name="id"></param>
        /// <param name="name"></param>
        /// <param name="color"></param>
        /// <param name="hates"></param>
        /// <param name="breed"></param>
        /// <returns> A new <see cref="Models.Siamese"/> instance for mocking. </returns>
        public static Siamese Siamese(int? id = null, string name = null, string color = null, IEnumerable<Dog> hates = null, string breed = null)
        {
            hates ??= new List<Dog>();

            return new Siamese(id, name, color, hates?.ToList(), breed);
        }

        /// <summary> Initializes a new instance of Cat. </summary>
        /// <param name="id"></param>
        /// <param name="name"></param>
        /// <param name="color"></param>
        /// <param name="hates"></param>
        /// <returns> A new <see cref="Models.Cat"/> instance for mocking. </returns>
        public static Cat Cat(int? id = null, string name = null, string color = null, IEnumerable<Dog> hates = null)
        {
            hates ??= new List<Dog>();

            return new Cat(id, name, color, hates?.ToList());
        }

        /// <summary> Initializes a new instance of Dog. </summary>
        /// <param name="id"></param>
        /// <param name="name"></param>
        /// <param name="food"></param>
        /// <returns> A new <see cref="Models.Dog"/> instance for mocking. </returns>
        public static Dog Dog(int? id = null, string name = null, string food = null)
        {
            return new Dog(id, name, food);
        }

        /// <summary> Initializes a new instance of Pet. </summary>
        /// <param name="id"></param>
        /// <param name="name"></param>
        /// <returns> A new <see cref="Models.Pet"/> instance for mocking. </returns>
        public static Pet Pet(int? id = null, string name = null)
        {
            return new Pet(id, name);
        }

        /// <summary> Initializes a new instance of Fish. </summary>
        /// <param name="fishtype"></param>
        /// <param name="species"></param>
        /// <param name="length"></param>
        /// <param name="siblings">
        /// Please note <see cref="Fish"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="Cookiecuttershark"/>, <see cref="Goblinshark"/>, <see cref="Salmon"/>, <see cref="Sawshark"/>, <see cref="Shark"/> and <see cref="SmartSalmon"/>.
        /// </param>
        /// <returns> A new <see cref="Models.Fish"/> instance for mocking. </returns>
        public static Fish Fish(string fishtype = null, string species = null, float length = default, IEnumerable<Fish> siblings = null)
        {
            siblings ??= new List<Fish>();

            return new UnknownFish(fishtype, species, length, siblings?.ToList());
        }

        /// <summary> Initializes a new instance of DotFish. </summary>
        /// <param name="fishType"></param>
        /// <param name="species"></param>
        /// <returns> A new <see cref="Models.DotFish"/> instance for mocking. </returns>
        public static DotFish DotFish(string fishType = null, string species = null)
        {
            return new UnknownDotFish(fishType, species);
        }

        /// <summary> Initializes a new instance of DotFishMarket. </summary>
        /// <param name="sampleSalmon"></param>
        /// <param name="salmons"></param>
        /// <param name="sampleFish">
        /// Please note <see cref="DotFish"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="DotSalmon"/>.
        /// </param>
        /// <param name="fishes">
        /// Please note <see cref="DotFish"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="DotSalmon"/>.
        /// </param>
        /// <returns> A new <see cref="Models.DotFishMarket"/> instance for mocking. </returns>
        public static DotFishMarket DotFishMarket(DotSalmon sampleSalmon = null, IEnumerable<DotSalmon> salmons = null, DotFish sampleFish = null, IEnumerable<DotFish> fishes = null)
        {
            salmons ??= new List<DotSalmon>();
            fishes ??= new List<DotFish>();

            return new DotFishMarket(sampleSalmon, salmons?.ToList(), sampleFish, fishes?.ToList());
        }

        /// <summary> Initializes a new instance of DotSalmon. </summary>
        /// <param name="species"></param>
        /// <param name="location"></param>
        /// <param name="iswild"></param>
        /// <returns> A new <see cref="Models.DotSalmon"/> instance for mocking. </returns>
        public static DotSalmon DotSalmon(string species = null, string location = null, bool? iswild = null)
        {
            return new DotSalmon("DotSalmon", species, location, iswild);
        }

        /// <summary> Initializes a new instance of Salmon. </summary>
        /// <param name="species"></param>
        /// <param name="length"></param>
        /// <param name="siblings">
        /// Please note <see cref="Fish"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="Cookiecuttershark"/>, <see cref="Goblinshark"/>, <see cref="Salmon"/>, <see cref="Sawshark"/>, <see cref="Shark"/> and <see cref="SmartSalmon"/>.
        /// </param>
        /// <param name="location"></param>
        /// <param name="iswild"></param>
        /// <returns> A new <see cref="Models.Salmon"/> instance for mocking. </returns>
        public static Salmon Salmon(string species = null, float length = default, IEnumerable<Fish> siblings = null, string location = null, bool? iswild = null)
        {
            siblings ??= new List<Fish>();

            return new Salmon("salmon", species, length, siblings?.ToList(), location, iswild);
        }

        /// <summary> Initializes a new instance of ReadonlyObj. </summary>
        /// <param name="id"></param>
        /// <param name="size"></param>
        /// <returns> A new <see cref="Models.ReadonlyObj"/> instance for mocking. </returns>
        public static ReadonlyObj ReadonlyObj(string id = null, int? size = null)
        {
            return new ReadonlyObj(id, size);
        }

        /// <summary> Initializes a new instance of MyBaseType. </summary>
        /// <param name="kind"></param>
        /// <param name="propB1"></param>
        /// <param name="propBH1"></param>
        /// <returns> A new <see cref="Models.MyBaseType"/> instance for mocking. </returns>
        public static MyBaseType MyBaseType(string kind = null, string propB1 = null, string propBH1 = null)
        {
            return new UnknownMyBaseType(kind, propB1, propBH1);
        }

        /// <summary> Initializes a new instance of SmartSalmon. </summary>
        /// <param name="species"></param>
        /// <param name="length"></param>
        /// <param name="siblings">
        /// Please note <see cref="Fish"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="Cookiecuttershark"/>, <see cref="Goblinshark"/>, <see cref="Salmon"/>, <see cref="Sawshark"/>, <see cref="Shark"/> and <see cref="SmartSalmon"/>.
        /// </param>
        /// <param name="location"></param>
        /// <param name="iswild"></param>
        /// <param name="collegeDegree"></param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.SmartSalmon"/> instance for mocking. </returns>
        public static SmartSalmon SmartSalmon(string species = null, float length = default, IEnumerable<Fish> siblings = null, string location = null, bool? iswild = null, string collegeDegree = null, IDictionary<string, object> additionalProperties = null)
        {
            siblings ??= new List<Fish>();
            additionalProperties ??= new Dictionary<string, object>();

            return new SmartSalmon("smart_salmon", species, length, siblings?.ToList(), location, iswild, collegeDegree, additionalProperties);
        }

        /// <summary> Initializes a new instance of Shark. </summary>
        /// <param name="species"></param>
        /// <param name="length"></param>
        /// <param name="siblings">
        /// Please note <see cref="Fish"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="Cookiecuttershark"/>, <see cref="Goblinshark"/>, <see cref="Salmon"/>, <see cref="Sawshark"/>, <see cref="Shark"/> and <see cref="SmartSalmon"/>.
        /// </param>
        /// <param name="age"></param>
        /// <param name="birthday"></param>
        /// <returns> A new <see cref="Models.Shark"/> instance for mocking. </returns>
        public static Shark Shark(string species = null, float length = default, IEnumerable<Fish> siblings = null, int? age = null, DateTimeOffset birthday = default)
        {
            siblings ??= new List<Fish>();

            return new Shark("shark", species, length, siblings?.ToList(), age, birthday);
        }

        /// <summary> Initializes a new instance of Sawshark. </summary>
        /// <param name="species"></param>
        /// <param name="length"></param>
        /// <param name="siblings">
        /// Please note <see cref="Fish"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="Cookiecuttershark"/>, <see cref="Goblinshark"/>, <see cref="Salmon"/>, <see cref="Sawshark"/>, <see cref="Shark"/> and <see cref="SmartSalmon"/>.
        /// </param>
        /// <param name="age"></param>
        /// <param name="birthday"></param>
        /// <param name="picture"></param>
        /// <returns> A new <see cref="Models.Sawshark"/> instance for mocking. </returns>
        public static Sawshark Sawshark(string species = null, float length = default, IEnumerable<Fish> siblings = null, int? age = null, DateTimeOffset birthday = default, byte[] picture = null)
        {
            siblings ??= new List<Fish>();

            return new Sawshark("sawshark", species, length, siblings?.ToList(), age, birthday, picture);
        }

        /// <summary> Initializes a new instance of Goblinshark. </summary>
        /// <param name="species"></param>
        /// <param name="length"></param>
        /// <param name="siblings">
        /// Please note <see cref="Fish"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="Cookiecuttershark"/>, <see cref="Goblinshark"/>, <see cref="Salmon"/>, <see cref="Sawshark"/>, <see cref="Shark"/> and <see cref="SmartSalmon"/>.
        /// </param>
        /// <param name="age"></param>
        /// <param name="birthday"></param>
        /// <param name="jawsize"></param>
        /// <param name="color"> Colors possible. </param>
        /// <returns> A new <see cref="Models.Goblinshark"/> instance for mocking. </returns>
        public static Goblinshark Goblinshark(string species = null, float length = default, IEnumerable<Fish> siblings = null, int? age = null, DateTimeOffset birthday = default, int? jawsize = null, GoblinSharkColor? color = null)
        {
            siblings ??= new List<Fish>();

            return new Goblinshark("goblin", species, length, siblings?.ToList(), age, birthday, jawsize, color);
        }

        /// <summary> Initializes a new instance of Cookiecuttershark. </summary>
        /// <param name="species"></param>
        /// <param name="length"></param>
        /// <param name="siblings">
        /// Please note <see cref="Fish"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="Cookiecuttershark"/>, <see cref="Goblinshark"/>, <see cref="Salmon"/>, <see cref="Sawshark"/>, <see cref="Shark"/> and <see cref="SmartSalmon"/>.
        /// </param>
        /// <param name="age"></param>
        /// <param name="birthday"></param>
        /// <returns> A new <see cref="Models.Cookiecuttershark"/> instance for mocking. </returns>
        public static Cookiecuttershark Cookiecuttershark(string species = null, float length = default, IEnumerable<Fish> siblings = null, int? age = null, DateTimeOffset birthday = default)
        {
            siblings ??= new List<Fish>();

            return new Cookiecuttershark("cookiecuttershark", species, length, siblings?.ToList(), age, birthday);
        }

        /// <summary> Initializes a new instance of MyDerivedType. </summary>
        /// <param name="propB1"></param>
        /// <param name="propBH1"></param>
        /// <param name="propD1"></param>
        /// <returns> A new <see cref="Models.MyDerivedType"/> instance for mocking. </returns>
        public static MyDerivedType MyDerivedType(string propB1 = null, string propBH1 = null, string propD1 = null)
        {
            return new MyDerivedType("Kind1", propB1, propBH1, propD1);
        }
    }
}
