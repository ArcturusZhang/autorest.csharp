// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Linq;

namespace model_flattening.Models
{
    /// <summary> Model factory for read-only models. </summary>
    public static partial class AutoRestResourceFlatteningTestServiceModelFactory
    {
        /// <summary> Initializes a new instance of Resource. </summary>
        /// <param name="id"> Resource Id. </param>
        /// <param name="type"> Resource Type. </param>
        /// <param name="tags"> Dictionary of &lt;string&gt;. </param>
        /// <param name="location"> Resource Location. </param>
        /// <param name="name"> Resource Name. </param>
        /// <returns> A new <see cref="Models.Resource"/> instance for mocking. </returns>
        public static Resource Resource(string id = null, string type = null, IDictionary<string, string> tags = null, string location = null, string name = null)
        {
            tags ??= new Dictionary<string, string>();

            return new Resource(id, type, tags, location, name);
        }

        /// <summary> Initializes a new instance of FlattenedProduct. </summary>
        /// <param name="id"> Resource Id. </param>
        /// <param name="type"> Resource Type. </param>
        /// <param name="tags"> Dictionary of &lt;string&gt;. </param>
        /// <param name="location"> Resource Location. </param>
        /// <param name="name"> Resource Name. </param>
        /// <param name="pName"></param>
        /// <param name="typePropertiesType"></param>
        /// <param name="provisioningStateValues"></param>
        /// <param name="provisioningState"></param>
        /// <returns> A new <see cref="Models.FlattenedProduct"/> instance for mocking. </returns>
        public static FlattenedProduct FlattenedProduct(string id = null, string type = null, IDictionary<string, string> tags = null, string location = null, string name = null, string pName = null, string typePropertiesType = null, FlattenedProductPropertiesProvisioningStateValues? provisioningStateValues = null, string provisioningState = null)
        {
            tags ??= new Dictionary<string, string>();

            return new FlattenedProduct(id, type, tags, location, name, pName, typePropertiesType, provisioningStateValues, provisioningState);
        }

        /// <summary> Initializes a new instance of ProductWrapper. </summary>
        /// <param name="value"> the product value. </param>
        /// <returns> A new <see cref="Models.ProductWrapper"/> instance for mocking. </returns>
        public static ProductWrapper ProductWrapper(string value = null)
        {
            return new ProductWrapper(value);
        }

        /// <summary> Initializes a new instance of ResourceCollection. </summary>
        /// <param name="productresource"> Flattened product. </param>
        /// <param name="arrayofresources"></param>
        /// <param name="dictionaryofresources"> Dictionary of &lt;FlattenedProduct&gt;. </param>
        /// <returns> A new <see cref="Models.ResourceCollection"/> instance for mocking. </returns>
        public static ResourceCollection ResourceCollection(FlattenedProduct productresource = null, IEnumerable<FlattenedProduct> arrayofresources = null, IDictionary<string, FlattenedProduct> dictionaryofresources = null)
        {
            arrayofresources ??= new List<FlattenedProduct>();
            dictionaryofresources ??= new Dictionary<string, FlattenedProduct>();

            return new ResourceCollection(productresource, arrayofresources?.ToList(), dictionaryofresources);
        }

        /// <summary> Initializes a new instance of SimpleProduct. </summary>
        /// <param name="productId"> Unique identifier representing a specific product for a given latitude &amp; longitude. For example, uberX in San Francisco will have a different product_id than uberX in Los Angeles. </param>
        /// <param name="description"> Description of product. </param>
        /// <param name="maxProductDisplayName"> Display name of product. </param>
        /// <param name="capacity"> Capacity of product. For example, 4 people. </param>
        /// <param name="genericValue"> Generic URL value. </param>
        /// <param name="odataValue"> URL value. </param>
        /// <returns> A new <see cref="Models.SimpleProduct"/> instance for mocking. </returns>
        public static SimpleProduct SimpleProduct(string productId = null, string description = null, string maxProductDisplayName = null, SimpleProductPropertiesMaxProductCapacity? capacity = null, string genericValue = null, string odataValue = null)
        {
            return new SimpleProduct(productId, description, maxProductDisplayName, capacity, genericValue, odataValue);
        }

        /// <summary> Initializes a new instance of BaseProduct. </summary>
        /// <param name="productId"> Unique identifier representing a specific product for a given latitude &amp; longitude. For example, uberX in San Francisco will have a different product_id than uberX in Los Angeles. </param>
        /// <param name="description"> Description of product. </param>
        /// <returns> A new <see cref="Models.BaseProduct"/> instance for mocking. </returns>
        public static BaseProduct BaseProduct(string productId = null, string description = null)
        {
            return new BaseProduct(productId, description);
        }
    }
}
