// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;

namespace additionalProperties.Models
{
    /// <summary> Model factory for read-only models. </summary>
    public static partial class AdditionalPropertiesModelFactory
    {
        /// <summary> Initializes a new instance of PetAPTrue. </summary>
        /// <param name="Id"></param>
        /// <param name="Name"></param>
        /// <param name="Status"></param>
        /// <param name="AdditionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.PetAPTrue"/> instance for mocking. </returns>
        public static PetAPTrue PetAPTrue(int Id = default, string Name = null, bool? Status = null, IDictionary<string, object> AdditionalProperties = null)
        {
            AdditionalProperties ??= new Dictionary<string, object>();

            return new PetAPTrue(Id, Name, Status, AdditionalProperties);
        }

        /// <summary> Initializes a new instance of PetAPObject. </summary>
        /// <param name="Id"></param>
        /// <param name="Name"></param>
        /// <param name="Status"></param>
        /// <param name="AdditionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.PetAPObject"/> instance for mocking. </returns>
        public static PetAPObject PetAPObject(int Id = default, string Name = null, bool? Status = null, IDictionary<string, object> AdditionalProperties = null)
        {
            AdditionalProperties ??= new Dictionary<string, object>();

            return new PetAPObject(Id, Name, Status, AdditionalProperties);
        }

        /// <summary> Initializes a new instance of PetAPString. </summary>
        /// <param name="Id"></param>
        /// <param name="Name"></param>
        /// <param name="Status"></param>
        /// <param name="AdditionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.PetAPString"/> instance for mocking. </returns>
        public static PetAPString PetAPString(int Id = default, string Name = null, bool? Status = null, IDictionary<string, string> AdditionalProperties = null)
        {
            AdditionalProperties ??= new Dictionary<string, string>();

            return new PetAPString(Id, Name, Status, AdditionalProperties);
        }

        /// <summary> Initializes a new instance of PetAPInProperties. </summary>
        /// <param name="Id"></param>
        /// <param name="Name"></param>
        /// <param name="Status"></param>
        /// <param name="AdditionalProperties"> Dictionary of &lt;number&gt;. </param>
        /// <returns> A new <see cref="Models.PetAPInProperties"/> instance for mocking. </returns>
        public static PetAPInProperties PetAPInProperties(int Id = default, string Name = null, bool? Status = null, IDictionary<string, float> AdditionalProperties = null)
        {
            AdditionalProperties ??= new Dictionary<string, float>();

            return new PetAPInProperties(Id, Name, Status, AdditionalProperties);
        }
    }
}
