// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace xml_service.Models
{
    /// <summary> Model factory for read-only models. </summary>
    public static partial class AutoRestSwaggerBATXMLServiceModelFactory
    {
        /// <summary> Initializes a new instance of RootWithRefAndNoMeta. </summary>
        /// <param name="refToModel"> XML will use RefToModel. </param>
        /// <param name="something"> Something else (just to avoid flattening). </param>
        /// <returns> A new <see cref="Models.RootWithRefAndNoMeta"/> instance for mocking. </returns>
        public static RootWithRefAndNoMeta RootWithRefAndNoMeta(ComplexTypeNoMeta refToModel = null, string something = null)
        {
            return new RootWithRefAndNoMeta(refToModel, something);
        }

        /// <summary> Initializes a new instance of ComplexTypeNoMeta. </summary>
        /// <param name="id"> The id of the res. </param>
        /// <returns> A new <see cref="Models.ComplexTypeNoMeta"/> instance for mocking. </returns>
        public static ComplexTypeNoMeta ComplexTypeNoMeta(string id = null)
        {
            return new ComplexTypeNoMeta(id);
        }

        /// <summary> Initializes a new instance of RootWithRefAndMeta. </summary>
        /// <param name="refToModel"> XML will use XMLComplexTypeWithMeta. </param>
        /// <param name="something"> Something else (just to avoid flattening). </param>
        /// <returns> A new <see cref="Models.RootWithRefAndMeta"/> instance for mocking. </returns>
        public static RootWithRefAndMeta RootWithRefAndMeta(ComplexTypeWithMeta refToModel = null, string something = null)
        {
            return new RootWithRefAndMeta(refToModel, something);
        }

        /// <summary> Initializes a new instance of ComplexTypeWithMeta. </summary>
        /// <param name="id"> The id of the res. </param>
        /// <returns> A new <see cref="Models.ComplexTypeWithMeta"/> instance for mocking. </returns>
        public static ComplexTypeWithMeta ComplexTypeWithMeta(string id = null)
        {
            return new ComplexTypeWithMeta(id);
        }

        /// <summary> Initializes a new instance of Slideshow. </summary>
        /// <param name="title"></param>
        /// <param name="date"></param>
        /// <param name="author"></param>
        /// <param name="slides"></param>
        /// <returns> A new <see cref="Models.Slideshow"/> instance for mocking. </returns>
        public static Slideshow Slideshow(string title = null, string date = null, string author = null, IEnumerable<Slide> slides = null)
        {
            slides ??= new List<Slide>();

            return new Slideshow(title, date, author, slides?.ToList());
        }

        /// <summary> Initializes a new instance of Slide. </summary>
        /// <param name="type"></param>
        /// <param name="title"></param>
        /// <param name="items"></param>
        /// <returns> A new <see cref="Models.Slide"/> instance for mocking. </returns>
        public static Slide Slide(string type = null, string title = null, IEnumerable<string> items = null)
        {
            items ??= new List<string>();

            return new Slide(type, title, items?.ToList());
        }

        /// <summary> Initializes a new instance of AppleBarrel. </summary>
        /// <param name="goodApples"></param>
        /// <param name="badApples"></param>
        /// <returns> A new <see cref="Models.AppleBarrel"/> instance for mocking. </returns>
        public static AppleBarrel AppleBarrel(IEnumerable<string> goodApples = null, IEnumerable<string> badApples = null)
        {
            goodApples ??= new List<string>();
            badApples ??= new List<string>();

            return new AppleBarrel(goodApples?.ToList(), badApples?.ToList());
        }

        /// <summary> Initializes a new instance of Banana. </summary>
        /// <param name="name"></param>
        /// <param name="flavor"></param>
        /// <param name="expiration"> The time at which you should reconsider eating this banana. </param>
        /// <returns> A new <see cref="Models.Banana"/> instance for mocking. </returns>
        public static Banana Banana(string name = null, string flavor = null, DateTimeOffset? expiration = null)
        {
            return new Banana(name, flavor, expiration);
        }

        /// <summary> Initializes a new instance of ListContainersResponse. </summary>
        /// <param name="serviceEndpoint"></param>
        /// <param name="prefix"></param>
        /// <param name="marker"></param>
        /// <param name="maxResults"></param>
        /// <param name="containers"></param>
        /// <param name="nextMarker"></param>
        /// <returns> A new <see cref="Models.ListContainersResponse"/> instance for mocking. </returns>
        public static ListContainersResponse ListContainersResponse(string serviceEndpoint = null, string prefix = null, string marker = null, int maxResults = default, IEnumerable<Container> containers = null, string nextMarker = null)
        {
            containers ??= new List<Container>();

            return new ListContainersResponse(serviceEndpoint, prefix, marker, maxResults, containers?.ToList(), nextMarker);
        }

        /// <summary> Initializes a new instance of Container. </summary>
        /// <param name="name"></param>
        /// <param name="properties"> Properties of a container. </param>
        /// <param name="metadata"> Dictionary of &lt;string&gt;. </param>
        /// <returns> A new <see cref="Models.Container"/> instance for mocking. </returns>
        public static Container Container(string name = null, ContainerProperties properties = null, IReadOnlyDictionary<string, string> metadata = null)
        {
            metadata ??= new Dictionary<string, string>();

            return new Container(name, properties, metadata);
        }

        /// <summary> Initializes a new instance of ContainerProperties. </summary>
        /// <param name="lastModified"></param>
        /// <param name="etag"></param>
        /// <param name="leaseStatus"></param>
        /// <param name="leaseState"></param>
        /// <param name="leaseDuration"></param>
        /// <param name="publicAccess"></param>
        /// <returns> A new <see cref="Models.ContainerProperties"/> instance for mocking. </returns>
        public static ContainerProperties ContainerProperties(DateTimeOffset lastModified = default, string etag = null, LeaseStatusType? leaseStatus = null, LeaseStateType? leaseState = null, LeaseDurationType? leaseDuration = null, PublicAccessType? publicAccess = null)
        {
            return new ContainerProperties(lastModified, etag, leaseStatus, leaseState, leaseDuration, publicAccess);
        }

        /// <summary> Initializes a new instance of StorageServiceProperties. </summary>
        /// <param name="logging"> Azure Analytics Logging settings. </param>
        /// <param name="hourMetrics"> A summary of request statistics grouped by API in hourly aggregates for blobs. </param>
        /// <param name="minuteMetrics"> a summary of request statistics grouped by API in minute aggregates for blobs. </param>
        /// <param name="cors"> The set of CORS rules. </param>
        /// <param name="defaultServiceVersion"> The default version to use for requests to the Blob service if an incoming request&apos;s version is not specified. Possible values include version 2008-10-27 and all more recent versions. </param>
        /// <param name="deleteRetentionPolicy"> The Delete Retention Policy for the service. </param>
        /// <returns> A new <see cref="Models.StorageServiceProperties"/> instance for mocking. </returns>
        public static StorageServiceProperties StorageServiceProperties(Logging logging = null, Metrics hourMetrics = null, Metrics minuteMetrics = null, IEnumerable<CorsRule> cors = null, string defaultServiceVersion = null, RetentionPolicy deleteRetentionPolicy = null)
        {
            cors ??= new List<CorsRule>();

            return new StorageServiceProperties(logging, hourMetrics, minuteMetrics, cors?.ToList(), defaultServiceVersion, deleteRetentionPolicy);
        }

        /// <summary> Initializes a new instance of RetentionPolicy. </summary>
        /// <param name="enabled"> Indicates whether a retention policy is enabled for the storage service. </param>
        /// <param name="days"> Indicates the number of days that metrics or logging or soft-deleted data should be retained. All data older than this value will be deleted. </param>
        /// <returns> A new <see cref="Models.RetentionPolicy"/> instance for mocking. </returns>
        public static RetentionPolicy RetentionPolicy(bool enabled = default, int? days = null)
        {
            return new RetentionPolicy(enabled, days);
        }

        /// <summary> Initializes a new instance of Metrics. </summary>
        /// <param name="version"> The version of Storage Analytics to configure. </param>
        /// <param name="enabled"> Indicates whether metrics are enabled for the Blob service. </param>
        /// <param name="includeAPIs"> Indicates whether metrics should generate summary statistics for called API operations. </param>
        /// <param name="retentionPolicy"> the retention policy. </param>
        /// <returns> A new <see cref="Models.Metrics"/> instance for mocking. </returns>
        public static Metrics Metrics(string version = null, bool enabled = default, bool? includeAPIs = null, RetentionPolicy retentionPolicy = null)
        {
            return new Metrics(version, enabled, includeAPIs, retentionPolicy);
        }

        /// <summary> Initializes a new instance of ListBlobsResponse. </summary>
        /// <param name="serviceEndpoint"></param>
        /// <param name="containerName"></param>
        /// <param name="prefix"></param>
        /// <param name="marker"></param>
        /// <param name="maxResults"></param>
        /// <param name="delimiter"></param>
        /// <param name="blobs"></param>
        /// <param name="nextMarker"></param>
        /// <returns> A new <see cref="Models.ListBlobsResponse"/> instance for mocking. </returns>
        public static ListBlobsResponse ListBlobsResponse(string serviceEndpoint = null, string containerName = null, string prefix = null, string marker = null, int maxResults = default, string delimiter = null, Blobs blobs = null, string nextMarker = null)
        {
            return new ListBlobsResponse(serviceEndpoint, containerName, prefix, marker, maxResults, delimiter, blobs, nextMarker);
        }

        /// <summary> Initializes a new instance of Blobs. </summary>
        /// <param name="blobPrefix"></param>
        /// <param name="blob"></param>
        /// <returns> A new <see cref="Models.Blobs"/> instance for mocking. </returns>
        public static Blobs Blobs(IEnumerable<BlobPrefix> blobPrefix = null, IEnumerable<Blob> blob = null)
        {
            blobPrefix ??= new List<BlobPrefix>();
            blob ??= new List<Blob>();

            return new Blobs(blobPrefix?.ToList(), blob?.ToList());
        }

        /// <summary> Initializes a new instance of BlobPrefix. </summary>
        /// <param name="name"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        /// <returns> A new <see cref="Models.BlobPrefix"/> instance for mocking. </returns>
        public static BlobPrefix BlobPrefix(string name = null)
        {
            if (name == null)
            {
                throw new ArgumentNullException(nameof(name));
            }

            return new BlobPrefix(name);
        }

        /// <summary> Initializes a new instance of Blob. </summary>
        /// <param name="name"></param>
        /// <param name="deleted"></param>
        /// <param name="snapshot"></param>
        /// <param name="properties"> Properties of a blob. </param>
        /// <param name="metadata"> Dictionary of &lt;string&gt;. </param>
        /// <returns> A new <see cref="Models.Blob"/> instance for mocking. </returns>
        public static Blob Blob(string name = null, bool deleted = default, string snapshot = null, BlobProperties properties = null, IReadOnlyDictionary<string, string> metadata = null)
        {
            metadata ??= new Dictionary<string, string>();

            return new Blob(name, deleted, snapshot, properties, metadata);
        }

        /// <summary> Initializes a new instance of BlobProperties. </summary>
        /// <param name="lastModified"></param>
        /// <param name="etag"></param>
        /// <param name="contentLength"> Size in bytes. </param>
        /// <param name="contentType"></param>
        /// <param name="contentEncoding"></param>
        /// <param name="contentLanguage"></param>
        /// <param name="contentMD5"></param>
        /// <param name="contentDisposition"></param>
        /// <param name="cacheControl"></param>
        /// <param name="blobSequenceNumber"></param>
        /// <param name="blobType"></param>
        /// <param name="leaseStatus"></param>
        /// <param name="leaseState"></param>
        /// <param name="leaseDuration"></param>
        /// <param name="copyId"></param>
        /// <param name="copyStatus"></param>
        /// <param name="copySource"></param>
        /// <param name="copyProgress"></param>
        /// <param name="copyCompletionTime"></param>
        /// <param name="copyStatusDescription"></param>
        /// <param name="serverEncrypted"></param>
        /// <param name="incrementalCopy"></param>
        /// <param name="destinationSnapshot"></param>
        /// <param name="deletedTime"></param>
        /// <param name="remainingRetentionDays"></param>
        /// <param name="accessTier"></param>
        /// <param name="accessTierInferred"></param>
        /// <param name="archiveStatus"></param>
        /// <returns> A new <see cref="Models.BlobProperties"/> instance for mocking. </returns>
        public static BlobProperties BlobProperties(DateTimeOffset lastModified = default, string etag = null, long? contentLength = null, string contentType = null, string contentEncoding = null, string contentLanguage = null, string contentMD5 = null, string contentDisposition = null, string cacheControl = null, int? blobSequenceNumber = null, BlobType? blobType = null, LeaseStatusType? leaseStatus = null, LeaseStateType? leaseState = null, LeaseDurationType? leaseDuration = null, string copyId = null, CopyStatusType? copyStatus = null, string copySource = null, string copyProgress = null, DateTimeOffset? copyCompletionTime = null, string copyStatusDescription = null, bool? serverEncrypted = null, bool? incrementalCopy = null, string destinationSnapshot = null, DateTimeOffset? deletedTime = null, int? remainingRetentionDays = null, AccessTier? accessTier = null, bool? accessTierInferred = null, ArchiveStatus? archiveStatus = null)
        {
            return new BlobProperties(lastModified, etag, contentLength, contentType, contentEncoding, contentLanguage, contentMD5, contentDisposition, cacheControl, blobSequenceNumber, blobType, leaseStatus, leaseState, leaseDuration, copyId, copyStatus, copySource, copyProgress, copyCompletionTime, copyStatusDescription, serverEncrypted, incrementalCopy, destinationSnapshot, deletedTime, remainingRetentionDays, accessTier, accessTierInferred, archiveStatus);
        }

        /// <summary> Initializes a new instance of JsonOutput. </summary>
        /// <param name="id"></param>
        /// <returns> A new <see cref="Models.JsonOutput"/> instance for mocking. </returns>
        public static JsonOutput JsonOutput(int? id = null)
        {
            return new JsonOutput(id);
        }

        /// <summary> Initializes a new instance of ObjectWithXMsTextProperty. </summary>
        /// <param name="language"> Returned value should be &apos;english&apos;. </param>
        /// <param name="content"> Returned value should be &apos;I am text&apos;. </param>
        /// <returns> A new <see cref="Models.ObjectWithXMsTextProperty"/> instance for mocking. </returns>
        public static ObjectWithXMsTextProperty ObjectWithXMsTextProperty(string language = null, string content = null)
        {
            return new ObjectWithXMsTextProperty(language, content);
        }

        /// <summary> Initializes a new instance of ModelWithByteProperty. </summary>
        /// <param name="bytes"></param>
        /// <returns> A new <see cref="Models.ModelWithByteProperty"/> instance for mocking. </returns>
        public static ModelWithByteProperty ModelWithByteProperty(byte[] bytes = null)
        {
            return new ModelWithByteProperty(bytes);
        }

        /// <summary> Initializes a new instance of ModelWithUrlProperty. </summary>
        /// <param name="url"></param>
        /// <returns> A new <see cref="Models.ModelWithUrlProperty"/> instance for mocking. </returns>
        public static ModelWithUrlProperty ModelWithUrlProperty(Uri url = null)
        {
            return new ModelWithUrlProperty(url);
        }
    }
}
