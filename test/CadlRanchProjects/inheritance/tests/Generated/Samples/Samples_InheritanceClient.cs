// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;
using _Type.Model.Inheritance;

namespace _Type.Model.Inheritance.Samples
{
    public class Samples_InheritanceClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PostValid()
        {
            InheritanceClient client = new InheritanceClient();

            RequestContent content = RequestContent.Create(new Dictionary<string, object>()
            {
                ["smart"] = true,
                ["age"] = 1234,
                ["name"] = "<name>",
            });
            Response response = client.PostValid(content);
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PostValid_Async()
        {
            InheritanceClient client = new InheritanceClient();

            RequestContent content = RequestContent.Create(new Dictionary<string, object>()
            {
                ["smart"] = true,
                ["age"] = 1234,
                ["name"] = "<name>",
            });
            Response response = await client.PostValidAsync(content);
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PostValid_AllParameters()
        {
            InheritanceClient client = new InheritanceClient();

            RequestContent content = RequestContent.Create(new Dictionary<string, object>()
            {
                ["smart"] = true,
                ["age"] = 1234,
                ["name"] = "<name>",
            });
            Response response = client.PostValid(content);
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PostValid_AllParameters_Async()
        {
            InheritanceClient client = new InheritanceClient();

            RequestContent content = RequestContent.Create(new Dictionary<string, object>()
            {
                ["smart"] = true,
                ["age"] = 1234,
                ["name"] = "<name>",
            });
            Response response = await client.PostValidAsync(content);
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetValid()
        {
            InheritanceClient client = new InheritanceClient();

            Response response = client.GetValid(new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("smart").ToString());
            Console.WriteLine(result.GetProperty("age").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetValid_Async()
        {
            InheritanceClient client = new InheritanceClient();

            Response response = await client.GetValidAsync(new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("smart").ToString());
            Console.WriteLine(result.GetProperty("age").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetValid_AllParameters()
        {
            InheritanceClient client = new InheritanceClient();

            Response response = client.GetValid(new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("smart").ToString());
            Console.WriteLine(result.GetProperty("age").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetValid_AllParameters_Async()
        {
            InheritanceClient client = new InheritanceClient();

            Response response = await client.GetValidAsync(new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("smart").ToString());
            Console.WriteLine(result.GetProperty("age").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PutValid()
        {
            InheritanceClient client = new InheritanceClient();

            RequestContent content = RequestContent.Create(new Dictionary<string, object>()
            {
                ["smart"] = true,
                ["age"] = 1234,
                ["name"] = "<name>",
            });
            Response response = client.PutValid(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("smart").ToString());
            Console.WriteLine(result.GetProperty("age").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PutValid_Async()
        {
            InheritanceClient client = new InheritanceClient();

            RequestContent content = RequestContent.Create(new Dictionary<string, object>()
            {
                ["smart"] = true,
                ["age"] = 1234,
                ["name"] = "<name>",
            });
            Response response = await client.PutValidAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("smart").ToString());
            Console.WriteLine(result.GetProperty("age").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PutValid_AllParameters()
        {
            InheritanceClient client = new InheritanceClient();

            RequestContent content = RequestContent.Create(new Dictionary<string, object>()
            {
                ["smart"] = true,
                ["age"] = 1234,
                ["name"] = "<name>",
            });
            Response response = client.PutValid(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("smart").ToString());
            Console.WriteLine(result.GetProperty("age").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PutValid_AllParameters_Async()
        {
            InheritanceClient client = new InheritanceClient();

            RequestContent content = RequestContent.Create(new Dictionary<string, object>()
            {
                ["smart"] = true,
                ["age"] = 1234,
                ["name"] = "<name>",
            });
            Response response = await client.PutValidAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("smart").ToString());
            Console.WriteLine(result.GetProperty("age").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetDuplicate()
        {
            InheritanceClient client = new InheritanceClient();

            Response response = client.GetDuplicate(new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetDuplicate_Async()
        {
            InheritanceClient client = new InheritanceClient();

            Response response = await client.GetDuplicateAsync(new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetDuplicate_AllParameters()
        {
            InheritanceClient client = new InheritanceClient();

            Response response = client.GetDuplicate(new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetDuplicate_AllParameters_Async()
        {
            InheritanceClient client = new InheritanceClient();

            Response response = await client.GetDuplicateAsync(new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetModel()
        {
            InheritanceClient client = new InheritanceClient();

            Response response = client.GetModel(new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("age").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetModel_Async()
        {
            InheritanceClient client = new InheritanceClient();

            Response response = await client.GetModelAsync(new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("age").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetModel_AllParameters()
        {
            InheritanceClient client = new InheritanceClient();

            Response response = client.GetModel(new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("age").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetModel_AllParameters_Async()
        {
            InheritanceClient client = new InheritanceClient();

            Response response = await client.GetModelAsync(new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("age").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PutModel()
        {
            InheritanceClient client = new InheritanceClient();

            RequestContent content = RequestContent.Create(new Dictionary<string, object>()
            {
                ["kind"] = "<kind>",
                ["age"] = 1234,
            });
            Response response = client.PutModel(content);
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PutModel_Async()
        {
            InheritanceClient client = new InheritanceClient();

            RequestContent content = RequestContent.Create(new Dictionary<string, object>()
            {
                ["kind"] = "<kind>",
                ["age"] = 1234,
            });
            Response response = await client.PutModelAsync(content);
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PutModel_AllParameters()
        {
            InheritanceClient client = new InheritanceClient();

            RequestContent content = RequestContent.Create(new Dictionary<string, object>()
            {
                ["kind"] = "<kind>",
                ["age"] = 1234,
            });
            Response response = client.PutModel(content);
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PutModel_AllParameters_Async()
        {
            InheritanceClient client = new InheritanceClient();

            RequestContent content = RequestContent.Create(new Dictionary<string, object>()
            {
                ["kind"] = "<kind>",
                ["age"] = 1234,
            });
            Response response = await client.PutModelAsync(content);
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetRecursiveModel()
        {
            InheritanceClient client = new InheritanceClient();

            Response response = client.GetRecursiveModel(new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("age").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetRecursiveModel_Async()
        {
            InheritanceClient client = new InheritanceClient();

            Response response = await client.GetRecursiveModelAsync(new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("age").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetRecursiveModel_AllParameters()
        {
            InheritanceClient client = new InheritanceClient();

            Response response = client.GetRecursiveModel(new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("age").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetRecursiveModel_AllParameters_Async()
        {
            InheritanceClient client = new InheritanceClient();

            Response response = await client.GetRecursiveModelAsync(new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("age").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PutRecursiveModel()
        {
            InheritanceClient client = new InheritanceClient();

            RequestContent content = RequestContent.Create(new Dictionary<string, object>()
            {
                ["kind"] = "<kind>",
                ["age"] = 1234,
            });
            Response response = client.PutRecursiveModel(content);
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PutRecursiveModel_Async()
        {
            InheritanceClient client = new InheritanceClient();

            RequestContent content = RequestContent.Create(new Dictionary<string, object>()
            {
                ["kind"] = "<kind>",
                ["age"] = 1234,
            });
            Response response = await client.PutRecursiveModelAsync(content);
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PutRecursiveModel_AllParameters()
        {
            InheritanceClient client = new InheritanceClient();

            RequestContent content = RequestContent.Create(new Dictionary<string, object>()
            {
                ["kind"] = "<kind>",
                ["age"] = 1234,
            });
            Response response = client.PutRecursiveModel(content);
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PutRecursiveModel_AllParameters_Async()
        {
            InheritanceClient client = new InheritanceClient();

            RequestContent content = RequestContent.Create(new Dictionary<string, object>()
            {
                ["kind"] = "<kind>",
                ["age"] = 1234,
            });
            Response response = await client.PutRecursiveModelAsync(content);
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetMissingDiscriminator()
        {
            InheritanceClient client = new InheritanceClient();

            Response response = client.GetMissingDiscriminator(new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("age").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetMissingDiscriminator_Async()
        {
            InheritanceClient client = new InheritanceClient();

            Response response = await client.GetMissingDiscriminatorAsync(new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("age").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetMissingDiscriminator_AllParameters()
        {
            InheritanceClient client = new InheritanceClient();

            Response response = client.GetMissingDiscriminator(new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("age").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetMissingDiscriminator_AllParameters_Async()
        {
            InheritanceClient client = new InheritanceClient();

            Response response = await client.GetMissingDiscriminatorAsync(new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("age").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetWrongDiscriminator()
        {
            InheritanceClient client = new InheritanceClient();

            Response response = client.GetWrongDiscriminator(new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("age").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetWrongDiscriminator_Async()
        {
            InheritanceClient client = new InheritanceClient();

            Response response = await client.GetWrongDiscriminatorAsync(new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("age").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetWrongDiscriminator_AllParameters()
        {
            InheritanceClient client = new InheritanceClient();

            Response response = client.GetWrongDiscriminator(new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("age").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetWrongDiscriminator_AllParameters_Async()
        {
            InheritanceClient client = new InheritanceClient();

            Response response = await client.GetWrongDiscriminatorAsync(new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("age").ToString());
        }
    }
}
