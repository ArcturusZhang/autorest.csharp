// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Linq;
using Azure.Core;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.Resources.Models;
using MgmtExpandResourceTypes;

namespace MgmtExpandResourceTypes.Models
{
    /// <summary> Model factory for generated models. </summary>
    public static partial class MgmtExpandResourceTypesModelFactory
    {
        /// <summary> Initializes a new instance of RecordSetData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="etag"> The etag of the record set. </param>
        /// <param name="metadata"> The metadata attached to the record set. </param>
        /// <param name="ttl"> The TTL (time-to-live) of the records in the record set. </param>
        /// <param name="fqdn"> Fully qualified domain name of the record set. </param>
        /// <param name="provisioningState"> provisioning State of the record set. </param>
        /// <param name="targetResourceId"> A reference to an azure resource from where the dns resource value is taken. </param>
        /// <param name="aRecords"> The list of A records in the record set. </param>
        /// <param name="aaaaRecords"> The list of AAAA records in the record set. </param>
        /// <param name="mxRecords"> The list of MX records in the record set. </param>
        /// <param name="nsRecords"> The list of NS records in the record set. </param>
        /// <param name="ptrRecords"> The list of PTR records in the record set. </param>
        /// <param name="srvRecords"> The list of SRV records in the record set. </param>
        /// <param name="txtRecords"> The list of TXT records in the record set. </param>
        /// <param name="cname"> The CNAME record in the  record set. </param>
        /// <param name="soaRecord"> The SOA record in the record set. </param>
        /// <param name="caaRecords"> The list of CAA records in the record set. </param>
        /// <returns> A new <see cref="MgmtExpandResourceTypes.RecordSetData"/> instance for mocking. </returns>
        public static RecordSetData RecordSetData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string etag = null, IDictionary<string, string> metadata = null, long? ttl = null, string fqdn = null, string provisioningState = null, ResourceIdentifier targetResourceId = null, IEnumerable<ARecord> aRecords = null, IEnumerable<AaaaRecord> aaaaRecords = null, IEnumerable<MxRecord> mxRecords = null, IEnumerable<NsRecord> nsRecords = null, IEnumerable<PtrRecord> ptrRecords = null, IEnumerable<SrvRecord> srvRecords = null, IEnumerable<TxtRecord> txtRecords = null, string cname = null, SoaRecord soaRecord = null, IEnumerable<CaaRecord> caaRecords = null)
        {
            metadata ??= new Dictionary<string, string>();
            aRecords ??= new List<ARecord>();
            aaaaRecords ??= new List<AaaaRecord>();
            mxRecords ??= new List<MxRecord>();
            nsRecords ??= new List<NsRecord>();
            ptrRecords ??= new List<PtrRecord>();
            srvRecords ??= new List<SrvRecord>();
            txtRecords ??= new List<TxtRecord>();
            caaRecords ??= new List<CaaRecord>();

            return new RecordSetData(id, name, resourceType, systemData, etag, metadata, ttl, fqdn, provisioningState, targetResourceId != null ? ResourceManagerModelFactory.WritableSubResource(targetResourceId) : null, aRecords?.ToList(), aaaaRecords?.ToList(), mxRecords?.ToList(), nsRecords?.ToList(), ptrRecords?.ToList(), srvRecords?.ToList(), txtRecords?.ToList(), cname != null ? new CnameRecord(cname) : null, soaRecord, caaRecords?.ToList());
        }

        /// <summary> Initializes a new instance of ARecord. </summary>
        /// <param name="ipv4Address"> The IPv4 address of this A record. </param>
        /// <returns> A new <see cref="Models.ARecord"/> instance for mocking. </returns>
        public static ARecord ARecord(string ipv4Address = null)
        {
            return new ARecord(ipv4Address);
        }

        /// <summary> Initializes a new instance of AaaaRecord. </summary>
        /// <param name="ipv6Address"> The IPv6 address of this AAAA record. </param>
        /// <returns> A new <see cref="Models.AaaaRecord"/> instance for mocking. </returns>
        public static AaaaRecord AaaaRecord(string ipv6Address = null)
        {
            return new AaaaRecord(ipv6Address);
        }

        /// <summary> Initializes a new instance of MxRecord. </summary>
        /// <param name="preference"> The preference value for this MX record. </param>
        /// <param name="exchange"> The domain name of the mail host for this MX record. </param>
        /// <returns> A new <see cref="Models.MxRecord"/> instance for mocking. </returns>
        public static MxRecord MxRecord(int? preference = null, string exchange = null)
        {
            return new MxRecord(preference, exchange);
        }

        /// <summary> Initializes a new instance of NsRecord. </summary>
        /// <param name="nsdname"> The name server name for this NS record. </param>
        /// <returns> A new <see cref="Models.NsRecord"/> instance for mocking. </returns>
        public static NsRecord NsRecord(string nsdname = null)
        {
            return new NsRecord(nsdname);
        }

        /// <summary> Initializes a new instance of PtrRecord. </summary>
        /// <param name="ptrdname"> The PTR target domain name for this PTR record. </param>
        /// <returns> A new <see cref="Models.PtrRecord"/> instance for mocking. </returns>
        public static PtrRecord PtrRecord(string ptrdname = null)
        {
            return new PtrRecord(ptrdname);
        }

        /// <summary> Initializes a new instance of SrvRecord. </summary>
        /// <param name="priority"> The priority value for this SRV record. </param>
        /// <param name="weight"> The weight value for this SRV record. </param>
        /// <param name="port"> The port value for this SRV record. </param>
        /// <param name="target"> The target domain name for this SRV record. </param>
        /// <returns> A new <see cref="Models.SrvRecord"/> instance for mocking. </returns>
        public static SrvRecord SrvRecord(int? priority = null, int? weight = null, int? port = null, string target = null)
        {
            return new SrvRecord(priority, weight, port, target);
        }

        /// <summary> Initializes a new instance of TxtRecord. </summary>
        /// <param name="value"> The text value of this TXT record. </param>
        /// <returns> A new <see cref="Models.TxtRecord"/> instance for mocking. </returns>
        public static TxtRecord TxtRecord(IEnumerable<string> value = null)
        {
            value ??= new List<string>();

            return new TxtRecord(value?.ToList());
        }

        /// <summary> Initializes a new instance of SoaRecord. </summary>
        /// <param name="host"> The domain name of the authoritative name server for this SOA record. </param>
        /// <param name="email"> The email contact for this SOA record. </param>
        /// <param name="serialNumber"> The serial number for this SOA record. </param>
        /// <param name="refreshTime"> The refresh value for this SOA record. </param>
        /// <param name="retryTime"> The retry time for this SOA record. </param>
        /// <param name="expireTime"> The expire time for this SOA record. </param>
        /// <param name="minimumTtl"> The minimum value for this SOA record. By convention this is used to determine the negative caching duration. </param>
        /// <returns> A new <see cref="Models.SoaRecord"/> instance for mocking. </returns>
        public static SoaRecord SoaRecord(string host = null, string email = null, long? serialNumber = null, long? refreshTime = null, long? retryTime = null, long? expireTime = null, long? minimumTtl = null)
        {
            return new SoaRecord(host, email, serialNumber, refreshTime, retryTime, expireTime, minimumTtl);
        }

        /// <summary> Initializes a new instance of CaaRecord. </summary>
        /// <param name="flags"> The flags for this CAA record as an integer between 0 and 255. </param>
        /// <param name="tag"> The tag for this CAA record. </param>
        /// <param name="value"> The value for this CAA record. </param>
        /// <returns> A new <see cref="Models.CaaRecord"/> instance for mocking. </returns>
        public static CaaRecord CaaRecord(int? flags = null, string tag = null, string value = null)
        {
            return new CaaRecord(flags, tag, value);
        }

        /// <summary> Initializes a new instance of ZoneData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="etag"> The etag of the zone. </param>
        /// <param name="maxNumberOfRecordSets"> The maximum number of record sets that can be created in this DNS zone.  This is a read-only property and any attempt to set this value will be ignored. </param>
        /// <param name="maxNumberOfRecordsPerRecordSet"> The maximum number of records per record set that can be created in this DNS zone.  This is a read-only property and any attempt to set this value will be ignored. </param>
        /// <param name="numberOfRecordSets"> The current number of record sets in this DNS zone.  This is a read-only property and any attempt to set this value will be ignored. </param>
        /// <param name="nameServers"> The name servers for this DNS zone. This is a read-only property and any attempt to set this value will be ignored. </param>
        /// <param name="zoneType"> The type of this DNS zone (Public or Private). </param>
        /// <param name="machineType"></param>
        /// <param name="storageType"></param>
        /// <param name="memoryType"></param>
        /// <param name="registrationVirtualNetworks"> A list of references to virtual networks that register hostnames in this DNS zone. This is a only when ZoneType is Private. </param>
        /// <param name="resolutionVirtualNetworks"> A list of references to virtual networks that resolve records in this DNS zone. This is a only when ZoneType is Private. </param>
        /// <returns> A new <see cref="MgmtExpandResourceTypes.ZoneData"/> instance for mocking. </returns>
        public static ZoneData ZoneData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, string etag = null, long? maxNumberOfRecordSets = null, long? maxNumberOfRecordsPerRecordSet = null, long? numberOfRecordSets = null, IEnumerable<string> nameServers = null, ZoneType? zoneType = null, MachineType? machineType = null, StorageType? storageType = null, MemoryType? memoryType = null, IEnumerable<WritableSubResource> registrationVirtualNetworks = null, IEnumerable<WritableSubResource> resolutionVirtualNetworks = null)
        {
            tags ??= new Dictionary<string, string>();
            nameServers ??= new List<string>();
            registrationVirtualNetworks ??= new List<WritableSubResource>();
            resolutionVirtualNetworks ??= new List<WritableSubResource>();

            return new ZoneData(id, name, resourceType, systemData, tags, location, etag, maxNumberOfRecordSets, maxNumberOfRecordsPerRecordSet, numberOfRecordSets, nameServers?.ToList(), zoneType, machineType, storageType, memoryType, registrationVirtualNetworks?.ToList(), resolutionVirtualNetworks?.ToList());
        }

        /// <summary> Initializes a new instance of DnsResourceReferenceResult. </summary>
        /// <param name="dnsResourceReferences"> The result of dns resource reference request. A list of dns resource references for each of the azure resource in the request. </param>
        /// <returns> A new <see cref="Models.DnsResourceReferenceResult"/> instance for mocking. </returns>
        public static DnsResourceReferenceResult DnsResourceReferenceResult(IEnumerable<DnsResourceReference> dnsResourceReferences = null)
        {
            dnsResourceReferences ??= new List<DnsResourceReference>();

            return new DnsResourceReferenceResult(dnsResourceReferences?.ToList());
        }

        /// <summary> Initializes a new instance of DnsResourceReference. </summary>
        /// <param name="dnsResources"> A list of dns Records. </param>
        /// <param name="targetResourceId"> A reference to an azure resource from where the dns resource value is taken. </param>
        /// <returns> A new <see cref="Models.DnsResourceReference"/> instance for mocking. </returns>
        public static DnsResourceReference DnsResourceReference(IEnumerable<WritableSubResource> dnsResources = null, ResourceIdentifier targetResourceId = null)
        {
            dnsResources ??= new List<WritableSubResource>();

            return new DnsResourceReference(dnsResources?.ToList(), targetResourceId != null ? ResourceManagerModelFactory.WritableSubResource(targetResourceId) : null);
        }
    }
}
