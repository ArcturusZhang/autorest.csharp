// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using Azure.Core;
using Azure.ResourceManager;

namespace MgmtExpandResourceTypes
{
    /// <summary> TODO. </summary>
    public abstract partial class RecordSetResource : ArmResource
    {
        internal static RecordSetResource GetResource(ArmClient client, RecordSetData data)
        {
            // this is only placeholder
            return new RecordSetAResource(client, data);
        }

        private readonly RecordSetData _data;

        /// <summary> Initializes a new instance of the <see cref="RecordSetResource"/> class for mocking. </summary>
        protected RecordSetResource()
        {
        }

        /// <summary> Initializes a new instance of the <see cref = "RecordSetResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="data"> The resource that is the target of operations. </param>
        internal RecordSetResource(ArmClient client, RecordSetData data) : this(client, data.Id)
        {
            HasData = true;
            _data = data;
        }

        /// <summary> Initializes a new instance of the <see cref="RecordSetResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal RecordSetResource(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
        }

        protected virtual string Type => "Base";

        /// <summary> Gets whether or not the current instance has data. </summary>
        public virtual bool HasData { get; }

        /// <summary> Gets the data representing this Feature. </summary>
        /// <exception cref="InvalidOperationException"> Throws if there is no data loaded in the current instance. </exception>
        public virtual RecordSetData Data
        {
            get
            {
                if (!HasData)
                    throw new InvalidOperationException("The current instance does not have data, you must call Get first.");
                return _data;
            }
        }
    }
}
