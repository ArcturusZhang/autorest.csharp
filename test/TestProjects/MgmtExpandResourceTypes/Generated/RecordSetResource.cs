// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using Azure.Core;
using Azure.ResourceManager;
using Azure.ResourceManager.Resources;

namespace MgmtExpandResourceTypes
{
    /// <summary> This is the base client representation of the following resources <see cref="RecordSetAResource" />, <see cref="RecordSetAaaaResource" />, <see cref="RecordSetCaaResource" />, <see cref="RecordSetCNameResource" />, <see cref="RecordSetMxResource" />, <see cref="RecordSetNsResource" />, <see cref="RecordSetPtrResource" />, <see cref="RecordSetSoaResource" />, <see cref="RecordSetSrvResource" /> or <see cref="RecordSetTxtResource" />. </summary>
    public abstract partial class RecordSetResource : ArmResource
    {
        internal static RecordSetResource GetResource(ArmClient client, RecordSetData data)
        {
            if (IsRecordSetAResource(data.Id))
            {
                return new RecordSetAResource(client, data);
            }
            if (IsRecordSetAaaaResource(data.Id))
            {
                return new RecordSetAaaaResource(client, data);
            }
            if (IsRecordSetCaaResource(data.Id))
            {
                return new RecordSetCaaResource(client, data);
            }
            if (IsRecordSetCNameResource(data.Id))
            {
                return new RecordSetCNameResource(client, data);
            }
            if (IsRecordSetMxResource(data.Id))
            {
                return new RecordSetMxResource(client, data);
            }
            if (IsRecordSetNsResource(data.Id))
            {
                return new RecordSetNsResource(client, data);
            }
            if (IsRecordSetPtrResource(data.Id))
            {
                return new RecordSetPtrResource(client, data);
            }
            if (IsRecordSetSoaResource(data.Id))
            {
                return new RecordSetSoaResource(client, data);
            }
            if (IsRecordSetSrvResource(data.Id))
            {
                return new RecordSetSrvResource(client, data);
            }
            if (IsRecordSetTxtResource(data.Id))
            {
                return new RecordSetTxtResource(client, data);
            }
            throw new InvalidOperationException($"The resource identifier {data.Id} cannot be recognized as one of the following resource candidates: RecordSetAResource, RecordSetAaaaResource, RecordSetCaaResource, RecordSetCNameResource, RecordSetMxResource, RecordSetNsResource, RecordSetPtrResource, RecordSetSoaResource, RecordSetSrvResource or RecordSetTxtResource");
        }

        private static bool IsRecordSetAResource(ResourceIdentifier id)
        {
            // checking the resource type
            if (id.ResourceType != RecordSetAResource.ResourceType)
            {
                return false;
            }
            // checking the resource scope
            if (id.Parent.Parent.ResourceType != ResourceGroupResource.ResourceType)
            {
                return false;
            }
            return true;
        }

        private static bool IsRecordSetAaaaResource(ResourceIdentifier id)
        {
            // checking the resource type
            if (id.ResourceType != RecordSetAaaaResource.ResourceType)
            {
                return false;
            }
            // checking the resource scope
            if (id.Parent.Parent.ResourceType != ResourceGroupResource.ResourceType)
            {
                return false;
            }
            return true;
        }

        private static bool IsRecordSetCaaResource(ResourceIdentifier id)
        {
            // checking the resource type
            if (id.ResourceType != RecordSetCaaResource.ResourceType)
            {
                return false;
            }
            // checking the resource scope
            if (id.Parent.Parent.ResourceType != ResourceGroupResource.ResourceType)
            {
                return false;
            }
            return true;
        }

        private static bool IsRecordSetCNameResource(ResourceIdentifier id)
        {
            // checking the resource type
            if (id.ResourceType != RecordSetCNameResource.ResourceType)
            {
                return false;
            }
            // checking the resource scope
            if (id.Parent.Parent.ResourceType != ResourceGroupResource.ResourceType)
            {
                return false;
            }
            return true;
        }

        private static bool IsRecordSetMxResource(ResourceIdentifier id)
        {
            // checking the resource type
            if (id.ResourceType != RecordSetMxResource.ResourceType)
            {
                return false;
            }
            // checking the resource scope
            if (id.Parent.Parent.ResourceType != ResourceGroupResource.ResourceType)
            {
                return false;
            }
            return true;
        }

        private static bool IsRecordSetNsResource(ResourceIdentifier id)
        {
            // checking the resource type
            if (id.ResourceType != RecordSetNsResource.ResourceType)
            {
                return false;
            }
            // checking the resource scope
            if (id.Parent.Parent.ResourceType != ResourceGroupResource.ResourceType)
            {
                return false;
            }
            return true;
        }

        private static bool IsRecordSetPtrResource(ResourceIdentifier id)
        {
            // checking the resource type
            if (id.ResourceType != RecordSetPtrResource.ResourceType)
            {
                return false;
            }
            // checking the resource scope
            if (id.Parent.Parent.ResourceType != ResourceGroupResource.ResourceType)
            {
                return false;
            }
            return true;
        }

        private static bool IsRecordSetSoaResource(ResourceIdentifier id)
        {
            // checking the resource type
            if (id.ResourceType != RecordSetSoaResource.ResourceType)
            {
                return false;
            }
            // checking the resource scope
            if (id.Parent.Parent.ResourceType != ResourceGroupResource.ResourceType)
            {
                return false;
            }
            return true;
        }

        private static bool IsRecordSetSrvResource(ResourceIdentifier id)
        {
            // checking the resource type
            if (id.ResourceType != RecordSetSrvResource.ResourceType)
            {
                return false;
            }
            // checking the resource scope
            if (id.Parent.Parent.ResourceType != ResourceGroupResource.ResourceType)
            {
                return false;
            }
            return true;
        }

        private static bool IsRecordSetTxtResource(ResourceIdentifier id)
        {
            // checking the resource type
            if (id.ResourceType != RecordSetTxtResource.ResourceType)
            {
                return false;
            }
            // checking the resource scope
            if (id.Parent.Parent.ResourceType != ResourceGroupResource.ResourceType)
            {
                return false;
            }
            return true;
        }

        private readonly RecordSetData _data;

        /// <summary> Initializes a new instance of the <see cref="RecordSetResource"/> class for mocking. </summary>
        protected RecordSetResource()
        {
        }

        /// <summary> Initializes a new instance of the <see cref = "RecordSetResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="data"> The resource that is the target of operations. </param>
        internal RecordSetResource(ArmClient client, RecordSetData data) : this(client, data.Id)
        {
            HasData = true;
            _data = data;
        }

        /// <summary> Initializes a new instance of the <see cref="RecordSetResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal RecordSetResource(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
        }

        /// <summary> Gets whether or not the current instance has data. </summary>
        public virtual bool HasData { get; }

        /// <summary> Gets the data representing this Feature. </summary>
        /// <exception cref="InvalidOperationException"> Throws if there is no data loaded in the current instance. </exception>
        public virtual RecordSetData Data
        {
            get
            {
                if (!HasData)
                    throw new InvalidOperationException("The current instance does not have data, you must call Get first.");
                return _data;
            }
        }
    }
}
