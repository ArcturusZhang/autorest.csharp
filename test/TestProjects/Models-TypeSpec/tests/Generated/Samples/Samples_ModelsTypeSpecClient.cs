// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using ModelsTypeSpec;
using NUnit.Framework;

namespace ModelsTypeSpec.Samples
{
    public class Samples_ModelsTypeSpecClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetOutputDiscriminatorModel()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            Response response = client.GetOutputDiscriminatorModel(new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetOutputDiscriminatorModel_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            Response response = await client.GetOutputDiscriminatorModelAsync(new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetOutputDiscriminatorModel_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            Response response = client.GetOutputDiscriminatorModel(new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetOutputDiscriminatorModel_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            Response response = await client.GetOutputDiscriminatorModelAsync(new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_InputToRoundTrip()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new Dictionary<string, object>()
            {
                ["requiredString"] = "<requiredString>",
                ["requiredInt"] = 1234,
                ["requiredModel"] = new Dictionary<string, object>(),
                ["requiredIntCollection"] = new object[]
            {
1234
            },
                ["requiredStringCollection"] = new object[]
            {
"<requiredStringCollection>"
            },
                ["requiredModelCollection"] = new object[]
            {
null
            },
                ["requiredModelRecord"] = new Dictionary<string, object>()
                {
                    ["key"] = new Dictionary<string, object>()
                    {
                        ["requiredCollection"] = new object[]
            {
null
            },
                    },
                },
                ["requiredCollectionWithNullableFloatElement"] = new object[]
            {
123.45F
            },
                ["requiredCollectionWithNullableBooleanElement"] = new object[]
            {
true
            },
            });
            Response response = client.InputToRoundTrip(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("requiredString").ToString());
            Console.WriteLine(result.GetProperty("requiredInt").ToString());
            Console.WriteLine(result.GetProperty("requiredModel").GetProperty("discriminatorProperty").ToString());
            Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredPropertyOnBase").ToString());
            Console.WriteLine(result.GetProperty("requiredFixedStringEnum").ToString());
            Console.WriteLine(result.GetProperty("requiredFixedIntEnum").ToString());
            Console.WriteLine(result.GetProperty("requiredExtensibleEnum").ToString());
            Console.WriteLine(result.GetProperty("requiredIntRecord").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("requiredStringRecord").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("requiredBytes").ToString());
            Console.WriteLine(result.GetProperty("requiredUint8Array")[0].ToString());
            Console.WriteLine(result.GetProperty("requiredUnknown").ToString());
            Console.WriteLine(result.GetProperty("requiredInt8Array")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_InputToRoundTrip_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new Dictionary<string, object>()
            {
                ["requiredString"] = "<requiredString>",
                ["requiredInt"] = 1234,
                ["requiredModel"] = new Dictionary<string, object>(),
                ["requiredIntCollection"] = new object[]
            {
1234
            },
                ["requiredStringCollection"] = new object[]
            {
"<requiredStringCollection>"
            },
                ["requiredModelCollection"] = new object[]
            {
null
            },
                ["requiredModelRecord"] = new Dictionary<string, object>()
                {
                    ["key"] = new Dictionary<string, object>()
                    {
                        ["requiredCollection"] = new object[]
            {
null
            },
                    },
                },
                ["requiredCollectionWithNullableFloatElement"] = new object[]
            {
123.45F
            },
                ["requiredCollectionWithNullableBooleanElement"] = new object[]
            {
true
            },
            });
            Response response = await client.InputToRoundTripAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("requiredString").ToString());
            Console.WriteLine(result.GetProperty("requiredInt").ToString());
            Console.WriteLine(result.GetProperty("requiredModel").GetProperty("discriminatorProperty").ToString());
            Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredPropertyOnBase").ToString());
            Console.WriteLine(result.GetProperty("requiredFixedStringEnum").ToString());
            Console.WriteLine(result.GetProperty("requiredFixedIntEnum").ToString());
            Console.WriteLine(result.GetProperty("requiredExtensibleEnum").ToString());
            Console.WriteLine(result.GetProperty("requiredIntRecord").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("requiredStringRecord").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("requiredBytes").ToString());
            Console.WriteLine(result.GetProperty("requiredUint8Array")[0].ToString());
            Console.WriteLine(result.GetProperty("requiredUnknown").ToString());
            Console.WriteLine(result.GetProperty("requiredInt8Array")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_InputToRoundTrip_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new Dictionary<string, object>()
            {
                ["requiredString"] = "<requiredString>",
                ["requiredInt"] = 1234,
                ["requiredModel"] = new Dictionary<string, object>(),
                ["requiredIntCollection"] = new object[]
            {
1234
            },
                ["requiredStringCollection"] = new object[]
            {
"<requiredStringCollection>"
            },
                ["requiredModelCollection"] = new object[]
            {
null
            },
                ["requiredModelRecord"] = new Dictionary<string, object>()
                {
                    ["key"] = new Dictionary<string, object>()
                    {
                        ["requiredCollection"] = new object[]
            {
null
            },
                    },
                },
                ["requiredCollectionWithNullableFloatElement"] = new object[]
            {
123.45F
            },
                ["requiredCollectionWithNullableBooleanElement"] = new object[]
            {
true
            },
            });
            Response response = client.InputToRoundTrip(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("requiredString").ToString());
            Console.WriteLine(result.GetProperty("requiredInt").ToString());
            Console.WriteLine(result.GetProperty("requiredModel").GetProperty("discriminatorProperty").ToString());
            Console.WriteLine(result.GetProperty("requiredModel").GetProperty("optionalPropertyOnBase").ToString());
            Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredPropertyOnBase").ToString());
            Console.WriteLine(result.GetProperty("requiredFixedStringEnum").ToString());
            Console.WriteLine(result.GetProperty("requiredFixedIntEnum").ToString());
            Console.WriteLine(result.GetProperty("requiredExtensibleEnum").ToString());
            Console.WriteLine(result.GetProperty("requiredIntRecord").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("requiredStringRecord").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("requiredBytes").ToString());
            Console.WriteLine(result.GetProperty("optionalBytes").ToString());
            Console.WriteLine(result.GetProperty("requiredUint8Array")[0].ToString());
            Console.WriteLine(result.GetProperty("optionalUint8Array")[0].ToString());
            Console.WriteLine(result.GetProperty("requiredUnknown").ToString());
            Console.WriteLine(result.GetProperty("optionalUnknown").ToString());
            Console.WriteLine(result.GetProperty("requiredInt8Array")[0].ToString());
            Console.WriteLine(result.GetProperty("optionalInt8Array")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_InputToRoundTrip_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new Dictionary<string, object>()
            {
                ["requiredString"] = "<requiredString>",
                ["requiredInt"] = 1234,
                ["requiredModel"] = new Dictionary<string, object>(),
                ["requiredIntCollection"] = new object[]
            {
1234
            },
                ["requiredStringCollection"] = new object[]
            {
"<requiredStringCollection>"
            },
                ["requiredModelCollection"] = new object[]
            {
null
            },
                ["requiredModelRecord"] = new Dictionary<string, object>()
                {
                    ["key"] = new Dictionary<string, object>()
                    {
                        ["requiredCollection"] = new object[]
            {
null
            },
                    },
                },
                ["requiredCollectionWithNullableFloatElement"] = new object[]
            {
123.45F
            },
                ["requiredCollectionWithNullableBooleanElement"] = new object[]
            {
true
            },
            });
            Response response = await client.InputToRoundTripAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("requiredString").ToString());
            Console.WriteLine(result.GetProperty("requiredInt").ToString());
            Console.WriteLine(result.GetProperty("requiredModel").GetProperty("discriminatorProperty").ToString());
            Console.WriteLine(result.GetProperty("requiredModel").GetProperty("optionalPropertyOnBase").ToString());
            Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredPropertyOnBase").ToString());
            Console.WriteLine(result.GetProperty("requiredFixedStringEnum").ToString());
            Console.WriteLine(result.GetProperty("requiredFixedIntEnum").ToString());
            Console.WriteLine(result.GetProperty("requiredExtensibleEnum").ToString());
            Console.WriteLine(result.GetProperty("requiredIntRecord").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("requiredStringRecord").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("requiredBytes").ToString());
            Console.WriteLine(result.GetProperty("optionalBytes").ToString());
            Console.WriteLine(result.GetProperty("requiredUint8Array")[0].ToString());
            Console.WriteLine(result.GetProperty("optionalUint8Array")[0].ToString());
            Console.WriteLine(result.GetProperty("requiredUnknown").ToString());
            Console.WriteLine(result.GetProperty("optionalUnknown").ToString());
            Console.WriteLine(result.GetProperty("requiredInt8Array")[0].ToString());
            Console.WriteLine(result.GetProperty("optionalInt8Array")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_InputToRoundTripPrimitive()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new Dictionary<string, object>()
            {
                ["requiredString"] = "<requiredString>",
                ["requiredInt"] = 1234,
                ["requiredModel"] = new Dictionary<string, object>(),
                ["requiredIntCollection"] = new object[]
            {
1234
            },
                ["requiredStringCollection"] = new object[]
            {
"<requiredStringCollection>"
            },
                ["requiredModelCollection"] = new object[]
            {
null
            },
                ["requiredModelRecord"] = new Dictionary<string, object>()
                {
                    ["key"] = new Dictionary<string, object>()
                    {
                        ["requiredCollection"] = new object[]
            {
null
            },
                    },
                },
                ["requiredCollectionWithNullableFloatElement"] = new object[]
            {
123.45F
            },
                ["requiredCollectionWithNullableBooleanElement"] = new object[]
            {
true
            },
            });
            Response response = client.InputToRoundTripPrimitive(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("requiredString").ToString());
            Console.WriteLine(result.GetProperty("requiredInt").ToString());
            Console.WriteLine(result.GetProperty("requiredInt64").ToString());
            Console.WriteLine(result.GetProperty("requiredSafeInt").ToString());
            Console.WriteLine(result.GetProperty("requiredFloat").ToString());
            Console.WriteLine(result.GetProperty("required_Double").ToString());
            Console.WriteLine(result.GetProperty("requiredBoolean").ToString());
            Console.WriteLine(result.GetProperty("requiredDateTimeOffset").ToString());
            Console.WriteLine(result.GetProperty("requiredTimeSpan").ToString());
            Console.WriteLine(result.GetProperty("requiredCollectionWithNullableFloatElement")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_InputToRoundTripPrimitive_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new Dictionary<string, object>()
            {
                ["requiredString"] = "<requiredString>",
                ["requiredInt"] = 1234,
                ["requiredModel"] = new Dictionary<string, object>(),
                ["requiredIntCollection"] = new object[]
            {
1234
            },
                ["requiredStringCollection"] = new object[]
            {
"<requiredStringCollection>"
            },
                ["requiredModelCollection"] = new object[]
            {
null
            },
                ["requiredModelRecord"] = new Dictionary<string, object>()
                {
                    ["key"] = new Dictionary<string, object>()
                    {
                        ["requiredCollection"] = new object[]
            {
null
            },
                    },
                },
                ["requiredCollectionWithNullableFloatElement"] = new object[]
            {
123.45F
            },
                ["requiredCollectionWithNullableBooleanElement"] = new object[]
            {
true
            },
            });
            Response response = await client.InputToRoundTripPrimitiveAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("requiredString").ToString());
            Console.WriteLine(result.GetProperty("requiredInt").ToString());
            Console.WriteLine(result.GetProperty("requiredInt64").ToString());
            Console.WriteLine(result.GetProperty("requiredSafeInt").ToString());
            Console.WriteLine(result.GetProperty("requiredFloat").ToString());
            Console.WriteLine(result.GetProperty("required_Double").ToString());
            Console.WriteLine(result.GetProperty("requiredBoolean").ToString());
            Console.WriteLine(result.GetProperty("requiredDateTimeOffset").ToString());
            Console.WriteLine(result.GetProperty("requiredTimeSpan").ToString());
            Console.WriteLine(result.GetProperty("requiredCollectionWithNullableFloatElement")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_InputToRoundTripPrimitive_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new Dictionary<string, object>()
            {
                ["requiredString"] = "<requiredString>",
                ["requiredInt"] = 1234,
                ["requiredModel"] = new Dictionary<string, object>(),
                ["requiredIntCollection"] = new object[]
            {
1234
            },
                ["requiredStringCollection"] = new object[]
            {
"<requiredStringCollection>"
            },
                ["requiredModelCollection"] = new object[]
            {
null
            },
                ["requiredModelRecord"] = new Dictionary<string, object>()
                {
                    ["key"] = new Dictionary<string, object>()
                    {
                        ["requiredCollection"] = new object[]
            {
null
            },
                    },
                },
                ["requiredCollectionWithNullableFloatElement"] = new object[]
            {
123.45F
            },
                ["requiredCollectionWithNullableBooleanElement"] = new object[]
            {
true
            },
            });
            Response response = client.InputToRoundTripPrimitive(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("requiredString").ToString());
            Console.WriteLine(result.GetProperty("requiredInt").ToString());
            Console.WriteLine(result.GetProperty("requiredInt64").ToString());
            Console.WriteLine(result.GetProperty("requiredSafeInt").ToString());
            Console.WriteLine(result.GetProperty("requiredFloat").ToString());
            Console.WriteLine(result.GetProperty("required_Double").ToString());
            Console.WriteLine(result.GetProperty("requiredBoolean").ToString());
            Console.WriteLine(result.GetProperty("requiredDateTimeOffset").ToString());
            Console.WriteLine(result.GetProperty("requiredTimeSpan").ToString());
            Console.WriteLine(result.GetProperty("requiredCollectionWithNullableFloatElement")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_InputToRoundTripPrimitive_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new Dictionary<string, object>()
            {
                ["requiredString"] = "<requiredString>",
                ["requiredInt"] = 1234,
                ["requiredModel"] = new Dictionary<string, object>(),
                ["requiredIntCollection"] = new object[]
            {
1234
            },
                ["requiredStringCollection"] = new object[]
            {
"<requiredStringCollection>"
            },
                ["requiredModelCollection"] = new object[]
            {
null
            },
                ["requiredModelRecord"] = new Dictionary<string, object>()
                {
                    ["key"] = new Dictionary<string, object>()
                    {
                        ["requiredCollection"] = new object[]
            {
null
            },
                    },
                },
                ["requiredCollectionWithNullableFloatElement"] = new object[]
            {
123.45F
            },
                ["requiredCollectionWithNullableBooleanElement"] = new object[]
            {
true
            },
            });
            Response response = await client.InputToRoundTripPrimitiveAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("requiredString").ToString());
            Console.WriteLine(result.GetProperty("requiredInt").ToString());
            Console.WriteLine(result.GetProperty("requiredInt64").ToString());
            Console.WriteLine(result.GetProperty("requiredSafeInt").ToString());
            Console.WriteLine(result.GetProperty("requiredFloat").ToString());
            Console.WriteLine(result.GetProperty("required_Double").ToString());
            Console.WriteLine(result.GetProperty("requiredBoolean").ToString());
            Console.WriteLine(result.GetProperty("requiredDateTimeOffset").ToString());
            Console.WriteLine(result.GetProperty("requiredTimeSpan").ToString());
            Console.WriteLine(result.GetProperty("requiredCollectionWithNullableFloatElement")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_InputToRoundTripOptional()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new Dictionary<string, object>()
            {
                ["optionalString"] = "<optionalString>",
                ["optionalInt"] = 1234,
                ["optionalStringList"] = new object[]
            {
"<optionalStringList>"
            },
                ["optionalIntList"] = new object[]
            {
1234
            },
                ["optionalModelCollection"] = new object[]
            {
null
            },
                ["optionalModel"] = new Dictionary<string, object>()
                {
                    ["requiredCollection"] = new object[]
            {
null
            },
                },
                ["optionalModelWithPropertiesOnBase"] = new Dictionary<string, object>()
                {
                    ["requiredCollection"] = new object[]
            {
null
            },
                    ["optionalPropertyOnBase"] = "<optionalPropertyOnBase>",
                },
                ["optionalFixedStringEnum"] = "1",
                ["optionalExtensibleEnum"] = "1",
                ["optionalIntRecord"] = new Dictionary<string, object>()
                {
                    ["key"] = 1234,
                },
                ["optionalStringRecord"] = new Dictionary<string, object>()
                {
                    ["key"] = "<optionalStringRecord>",
                },
                ["optionalModelRecord"] = new Dictionary<string, object>()
                {
                    ["key"] = new Dictionary<string, object>()
                    {
                        ["requiredCollection"] = new object[]
            {
null
            },
                    },
                },
                ["optionalPlainDate"] = "2022-05-10",
                ["optionalPlainTime"] = "01:23:45",
                ["optionalCollectionWithNullableIntElement"] = new object[]
            {
1234
            },
            });
            Response response = client.InputToRoundTripOptional(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_InputToRoundTripOptional_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new Dictionary<string, object>()
            {
                ["optionalString"] = "<optionalString>",
                ["optionalInt"] = 1234,
                ["optionalStringList"] = new object[]
            {
"<optionalStringList>"
            },
                ["optionalIntList"] = new object[]
            {
1234
            },
                ["optionalModelCollection"] = new object[]
            {
null
            },
                ["optionalModel"] = new Dictionary<string, object>()
                {
                    ["requiredCollection"] = new object[]
            {
null
            },
                },
                ["optionalModelWithPropertiesOnBase"] = new Dictionary<string, object>()
                {
                    ["requiredCollection"] = new object[]
            {
null
            },
                    ["optionalPropertyOnBase"] = "<optionalPropertyOnBase>",
                },
                ["optionalFixedStringEnum"] = "1",
                ["optionalExtensibleEnum"] = "1",
                ["optionalIntRecord"] = new Dictionary<string, object>()
                {
                    ["key"] = 1234,
                },
                ["optionalStringRecord"] = new Dictionary<string, object>()
                {
                    ["key"] = "<optionalStringRecord>",
                },
                ["optionalModelRecord"] = new Dictionary<string, object>()
                {
                    ["key"] = new Dictionary<string, object>()
                    {
                        ["requiredCollection"] = new object[]
            {
null
            },
                    },
                },
                ["optionalPlainDate"] = "2022-05-10",
                ["optionalPlainTime"] = "01:23:45",
                ["optionalCollectionWithNullableIntElement"] = new object[]
            {
1234
            },
            });
            Response response = await client.InputToRoundTripOptionalAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_InputToRoundTripOptional_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new Dictionary<string, object>()
            {
                ["optionalString"] = "<optionalString>",
                ["optionalInt"] = 1234,
                ["optionalStringList"] = new object[]
            {
"<optionalStringList>"
            },
                ["optionalIntList"] = new object[]
            {
1234
            },
                ["optionalModelCollection"] = new object[]
            {
null
            },
                ["optionalModel"] = new Dictionary<string, object>()
                {
                    ["requiredCollection"] = new object[]
            {
null
            },
                },
                ["optionalModelWithPropertiesOnBase"] = new Dictionary<string, object>()
                {
                    ["requiredCollection"] = new object[]
            {
null
            },
                    ["optionalPropertyOnBase"] = "<optionalPropertyOnBase>",
                },
                ["optionalFixedStringEnum"] = "1",
                ["optionalExtensibleEnum"] = "1",
                ["optionalIntRecord"] = new Dictionary<string, object>()
                {
                    ["key"] = 1234,
                },
                ["optionalStringRecord"] = new Dictionary<string, object>()
                {
                    ["key"] = "<optionalStringRecord>",
                },
                ["optionalModelRecord"] = new Dictionary<string, object>()
                {
                    ["key"] = new Dictionary<string, object>()
                    {
                        ["requiredCollection"] = new object[]
            {
null
            },
                    },
                },
                ["optionalPlainDate"] = "2022-05-10",
                ["optionalPlainTime"] = "01:23:45",
                ["optionalCollectionWithNullableIntElement"] = new object[]
            {
1234
            },
            });
            Response response = client.InputToRoundTripOptional(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("optionalString").ToString());
            Console.WriteLine(result.GetProperty("optionalInt").ToString());
            Console.WriteLine(result.GetProperty("optionalStringList")[0].ToString());
            Console.WriteLine(result.GetProperty("optionalIntList")[0].ToString());
            Console.WriteLine(result.GetProperty("optionalModelWithPropertiesOnBase").GetProperty("optionalPropertyOnBase").ToString());
            Console.WriteLine(result.GetProperty("optionalFixedStringEnum").ToString());
            Console.WriteLine(result.GetProperty("optionalExtensibleEnum").ToString());
            Console.WriteLine(result.GetProperty("optionalIntRecord").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("optionalStringRecord").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("optionalPlainDate").ToString());
            Console.WriteLine(result.GetProperty("optionalPlainTime").ToString());
            Console.WriteLine(result.GetProperty("optionalCollectionWithNullableIntElement")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_InputToRoundTripOptional_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new Dictionary<string, object>()
            {
                ["optionalString"] = "<optionalString>",
                ["optionalInt"] = 1234,
                ["optionalStringList"] = new object[]
            {
"<optionalStringList>"
            },
                ["optionalIntList"] = new object[]
            {
1234
            },
                ["optionalModelCollection"] = new object[]
            {
null
            },
                ["optionalModel"] = new Dictionary<string, object>()
                {
                    ["requiredCollection"] = new object[]
            {
null
            },
                },
                ["optionalModelWithPropertiesOnBase"] = new Dictionary<string, object>()
                {
                    ["requiredCollection"] = new object[]
            {
null
            },
                    ["optionalPropertyOnBase"] = "<optionalPropertyOnBase>",
                },
                ["optionalFixedStringEnum"] = "1",
                ["optionalExtensibleEnum"] = "1",
                ["optionalIntRecord"] = new Dictionary<string, object>()
                {
                    ["key"] = 1234,
                },
                ["optionalStringRecord"] = new Dictionary<string, object>()
                {
                    ["key"] = "<optionalStringRecord>",
                },
                ["optionalModelRecord"] = new Dictionary<string, object>()
                {
                    ["key"] = new Dictionary<string, object>()
                    {
                        ["requiredCollection"] = new object[]
            {
null
            },
                    },
                },
                ["optionalPlainDate"] = "2022-05-10",
                ["optionalPlainTime"] = "01:23:45",
                ["optionalCollectionWithNullableIntElement"] = new object[]
            {
1234
            },
            });
            Response response = await client.InputToRoundTripOptionalAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("optionalString").ToString());
            Console.WriteLine(result.GetProperty("optionalInt").ToString());
            Console.WriteLine(result.GetProperty("optionalStringList")[0].ToString());
            Console.WriteLine(result.GetProperty("optionalIntList")[0].ToString());
            Console.WriteLine(result.GetProperty("optionalModelWithPropertiesOnBase").GetProperty("optionalPropertyOnBase").ToString());
            Console.WriteLine(result.GetProperty("optionalFixedStringEnum").ToString());
            Console.WriteLine(result.GetProperty("optionalExtensibleEnum").ToString());
            Console.WriteLine(result.GetProperty("optionalIntRecord").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("optionalStringRecord").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("optionalPlainDate").ToString());
            Console.WriteLine(result.GetProperty("optionalPlainTime").ToString());
            Console.WriteLine(result.GetProperty("optionalCollectionWithNullableIntElement")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RoundTripToOutput()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new Dictionary<string, object>()
            {
                ["requiredString"] = "<requiredString>",
                ["requiredInt"] = 1234,
                ["requiredModel"] = new Dictionary<string, object>()
                {
                    ["discriminatorProperty"] = "<discriminatorProperty>",
                    ["optionalPropertyOnBase"] = "<optionalPropertyOnBase>",
                    ["requiredPropertyOnBase"] = 1234,
                },
                ["requiredFixedStringEnum"] = "1",
                ["requiredFixedIntEnum"] = 1,
                ["requiredExtensibleEnum"] = "1",
                ["requiredCollection"] = new object[]
            {
null
            },
                ["requiredIntRecord"] = new Dictionary<string, object>()
                {
                    ["key"] = 1234,
                },
                ["requiredStringRecord"] = new Dictionary<string, object>()
                {
                    ["key"] = "<requiredStringRecord>",
                },
                ["requiredModelRecord"] = new Dictionary<string, object>()
                {
                    ["key"] = new Dictionary<string, object>()
                    {
                        ["requiredCollection"] = new object[]
            {
null
            },
                    },
                },
                ["requiredBytes"] = new Dictionary<string, object>(),
                ["optionalBytes"] = new Dictionary<string, object>(),
                ["requiredUint8Array"] = new object[]
            {
1234
            },
                ["optionalUint8Array"] = new object[]
            {
1234
            },
                ["requiredUnknown"] = new Dictionary<string, object>(),
                ["optionalUnknown"] = new Dictionary<string, object>(),
                ["requiredInt8Array"] = new object[]
            {
1234
            },
                ["optionalInt8Array"] = new object[]
            {
1234
            },
            });
            Response response = client.RoundTripToOutput(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("requiredString").ToString());
            Console.WriteLine(result.GetProperty("requiredInt").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RoundTripToOutput_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new Dictionary<string, object>()
            {
                ["requiredString"] = "<requiredString>",
                ["requiredInt"] = 1234,
                ["requiredModel"] = new Dictionary<string, object>()
                {
                    ["discriminatorProperty"] = "<discriminatorProperty>",
                    ["optionalPropertyOnBase"] = "<optionalPropertyOnBase>",
                    ["requiredPropertyOnBase"] = 1234,
                },
                ["requiredFixedStringEnum"] = "1",
                ["requiredFixedIntEnum"] = 1,
                ["requiredExtensibleEnum"] = "1",
                ["requiredCollection"] = new object[]
            {
null
            },
                ["requiredIntRecord"] = new Dictionary<string, object>()
                {
                    ["key"] = 1234,
                },
                ["requiredStringRecord"] = new Dictionary<string, object>()
                {
                    ["key"] = "<requiredStringRecord>",
                },
                ["requiredModelRecord"] = new Dictionary<string, object>()
                {
                    ["key"] = new Dictionary<string, object>()
                    {
                        ["requiredCollection"] = new object[]
            {
null
            },
                    },
                },
                ["requiredBytes"] = new Dictionary<string, object>(),
                ["optionalBytes"] = new Dictionary<string, object>(),
                ["requiredUint8Array"] = new object[]
            {
1234
            },
                ["optionalUint8Array"] = new object[]
            {
1234
            },
                ["requiredUnknown"] = new Dictionary<string, object>(),
                ["optionalUnknown"] = new Dictionary<string, object>(),
                ["requiredInt8Array"] = new object[]
            {
1234
            },
                ["optionalInt8Array"] = new object[]
            {
1234
            },
            });
            Response response = await client.RoundTripToOutputAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("requiredString").ToString());
            Console.WriteLine(result.GetProperty("requiredInt").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RoundTripToOutput_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new Dictionary<string, object>()
            {
                ["requiredString"] = "<requiredString>",
                ["requiredInt"] = 1234,
                ["requiredModel"] = new Dictionary<string, object>()
                {
                    ["discriminatorProperty"] = "<discriminatorProperty>",
                    ["optionalPropertyOnBase"] = "<optionalPropertyOnBase>",
                    ["requiredPropertyOnBase"] = 1234,
                },
                ["requiredFixedStringEnum"] = "1",
                ["requiredFixedIntEnum"] = 1,
                ["requiredExtensibleEnum"] = "1",
                ["requiredCollection"] = new object[]
            {
null
            },
                ["requiredIntRecord"] = new Dictionary<string, object>()
                {
                    ["key"] = 1234,
                },
                ["requiredStringRecord"] = new Dictionary<string, object>()
                {
                    ["key"] = "<requiredStringRecord>",
                },
                ["requiredModelRecord"] = new Dictionary<string, object>()
                {
                    ["key"] = new Dictionary<string, object>()
                    {
                        ["requiredCollection"] = new object[]
            {
null
            },
                    },
                },
                ["requiredBytes"] = new Dictionary<string, object>(),
                ["optionalBytes"] = new Dictionary<string, object>(),
                ["requiredUint8Array"] = new object[]
            {
1234
            },
                ["optionalUint8Array"] = new object[]
            {
1234
            },
                ["requiredUnknown"] = new Dictionary<string, object>(),
                ["optionalUnknown"] = new Dictionary<string, object>(),
                ["requiredInt8Array"] = new object[]
            {
1234
            },
                ["optionalInt8Array"] = new object[]
            {
1234
            },
            });
            Response response = client.RoundTripToOutput(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("requiredString").ToString());
            Console.WriteLine(result.GetProperty("requiredInt").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RoundTripToOutput_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new Dictionary<string, object>()
            {
                ["requiredString"] = "<requiredString>",
                ["requiredInt"] = 1234,
                ["requiredModel"] = new Dictionary<string, object>()
                {
                    ["discriminatorProperty"] = "<discriminatorProperty>",
                    ["optionalPropertyOnBase"] = "<optionalPropertyOnBase>",
                    ["requiredPropertyOnBase"] = 1234,
                },
                ["requiredFixedStringEnum"] = "1",
                ["requiredFixedIntEnum"] = 1,
                ["requiredExtensibleEnum"] = "1",
                ["requiredCollection"] = new object[]
            {
null
            },
                ["requiredIntRecord"] = new Dictionary<string, object>()
                {
                    ["key"] = 1234,
                },
                ["requiredStringRecord"] = new Dictionary<string, object>()
                {
                    ["key"] = "<requiredStringRecord>",
                },
                ["requiredModelRecord"] = new Dictionary<string, object>()
                {
                    ["key"] = new Dictionary<string, object>()
                    {
                        ["requiredCollection"] = new object[]
            {
null
            },
                    },
                },
                ["requiredBytes"] = new Dictionary<string, object>(),
                ["optionalBytes"] = new Dictionary<string, object>(),
                ["requiredUint8Array"] = new object[]
            {
1234
            },
                ["optionalUint8Array"] = new object[]
            {
1234
            },
                ["requiredUnknown"] = new Dictionary<string, object>(),
                ["optionalUnknown"] = new Dictionary<string, object>(),
                ["requiredInt8Array"] = new object[]
            {
1234
            },
                ["optionalInt8Array"] = new object[]
            {
1234
            },
            });
            Response response = await client.RoundTripToOutputAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("requiredString").ToString());
            Console.WriteLine(result.GetProperty("requiredInt").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_InputRecursive()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new Dictionary<string, object>()
            {
                ["message"] = "<message>",
            });
            Response response = client.InputRecursive(content);
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_InputRecursive_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new Dictionary<string, object>()
            {
                ["message"] = "<message>",
            });
            Response response = await client.InputRecursiveAsync(content);
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_InputRecursive_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new Dictionary<string, object>()
            {
                ["message"] = "<message>",
            });
            Response response = client.InputRecursive(content);
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_InputRecursive_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new Dictionary<string, object>()
            {
                ["message"] = "<message>",
            });
            Response response = await client.InputRecursiveAsync(content);
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RoundTripRecursive()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new Dictionary<string, object>()
            {
                ["message"] = "<message>",
            });
            Response response = client.RoundTripRecursive(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("message").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RoundTripRecursive_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new Dictionary<string, object>()
            {
                ["message"] = "<message>",
            });
            Response response = await client.RoundTripRecursiveAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("message").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RoundTripRecursive_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new Dictionary<string, object>()
            {
                ["message"] = "<message>",
            });
            Response response = client.RoundTripRecursive(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("inner").GetProperty("message").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RoundTripRecursive_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new Dictionary<string, object>()
            {
                ["message"] = "<message>",
            });
            Response response = await client.RoundTripRecursiveAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("inner").GetProperty("message").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_SelfReference()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            Response response = client.SelfReference(new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("message").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_SelfReference_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            Response response = await client.SelfReferenceAsync(new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("message").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_SelfReference_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            Response response = client.SelfReference(new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("innerError").GetProperty("message").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_SelfReference_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            Response response = await client.SelfReferenceAsync(new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("innerError").GetProperty("message").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RoundTripToOutputWithNoUseBase()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new Dictionary<string, object>()
            {
                ["requiredCollection"] = new object[]
            {
null
            },
                ["baseModelProp"] = "<baseModelProp>",
            });
            Response response = client.RoundTripToOutputWithNoUseBase(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("baseModelProp").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RoundTripToOutputWithNoUseBase_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new Dictionary<string, object>()
            {
                ["requiredCollection"] = new object[]
            {
null
            },
                ["baseModelProp"] = "<baseModelProp>",
            });
            Response response = await client.RoundTripToOutputWithNoUseBaseAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("baseModelProp").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RoundTripToOutputWithNoUseBase_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new Dictionary<string, object>()
            {
                ["requiredCollection"] = new object[]
            {
null
            },
                ["baseModelProp"] = "<baseModelProp>",
            });
            Response response = client.RoundTripToOutputWithNoUseBase(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("baseModelProp").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RoundTripToOutputWithNoUseBase_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new Dictionary<string, object>()
            {
                ["requiredCollection"] = new object[]
            {
null
            },
                ["baseModelProp"] = "<baseModelProp>",
            });
            Response response = await client.RoundTripToOutputWithNoUseBaseAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("baseModelProp").ToString());
        }
    }
}
