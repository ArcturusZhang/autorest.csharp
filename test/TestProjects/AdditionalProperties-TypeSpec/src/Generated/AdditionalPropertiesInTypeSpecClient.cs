// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using AdditionalPropertiesInTypeSpec.Models;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace AdditionalPropertiesInTypeSpec
{
    // Data plane generated client.
    /// <summary> This is a sample typespec project for additional properties. </summary>
    public partial class AdditionalPropertiesInTypeSpecClient
    {
        private const string AuthorizationHeader = "x-ms-api-key";
        private readonly AzureKeyCredential _keyCredential;
        private static readonly string[] AuthorizationScopes = new string[] { "https://api.example.com/.default" };
        private readonly TokenCredential _tokenCredential;
        private readonly HttpPipeline _pipeline;
        private readonly Uri _endpoint;
        private readonly string _apiVersion;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline => _pipeline;

        /// <summary> Initializes a new instance of AdditionalPropertiesInTypeSpecClient for mocking. </summary>
        protected AdditionalPropertiesInTypeSpecClient()
        {
        }

        /// <summary> Initializes a new instance of AdditionalPropertiesInTypeSpecClient. </summary>
        /// <param name="endpoint"> The <see cref="Uri"/> to use. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> or <paramref name="credential"/> is null. </exception>
        public AdditionalPropertiesInTypeSpecClient(Uri endpoint, AzureKeyCredential credential) : this(endpoint, credential, new AdditionalPropertiesInTypeSpecClientOptions())
        {
        }

        /// <summary> Initializes a new instance of AdditionalPropertiesInTypeSpecClient. </summary>
        /// <param name="endpoint"> The <see cref="Uri"/> to use. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> or <paramref name="credential"/> is null. </exception>
        public AdditionalPropertiesInTypeSpecClient(Uri endpoint, TokenCredential credential) : this(endpoint, credential, new AdditionalPropertiesInTypeSpecClientOptions())
        {
        }

        /// <summary> Initializes a new instance of AdditionalPropertiesInTypeSpecClient. </summary>
        /// <param name="endpoint"> The <see cref="Uri"/> to use. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> or <paramref name="credential"/> is null. </exception>
        public AdditionalPropertiesInTypeSpecClient(Uri endpoint, AzureKeyCredential credential, AdditionalPropertiesInTypeSpecClientOptions options)
        {
            Argument.AssertNotNull(endpoint, nameof(endpoint));
            Argument.AssertNotNull(credential, nameof(credential));
            options ??= new AdditionalPropertiesInTypeSpecClientOptions();

            ClientDiagnostics = new ClientDiagnostics(options, true);
            _keyCredential = credential;
            _pipeline = HttpPipelineBuilder.Build(options, Array.Empty<HttpPipelinePolicy>(), new HttpPipelinePolicy[] { new AzureKeyCredentialPolicy(_keyCredential, AuthorizationHeader) }, new ResponseClassifier());
            _endpoint = endpoint;
            _apiVersion = options.Version;
        }

        /// <summary> Initializes a new instance of AdditionalPropertiesInTypeSpecClient. </summary>
        /// <param name="endpoint"> The <see cref="Uri"/> to use. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> or <paramref name="credential"/> is null. </exception>
        public AdditionalPropertiesInTypeSpecClient(Uri endpoint, TokenCredential credential, AdditionalPropertiesInTypeSpecClientOptions options)
        {
            Argument.AssertNotNull(endpoint, nameof(endpoint));
            Argument.AssertNotNull(credential, nameof(credential));
            options ??= new AdditionalPropertiesInTypeSpecClientOptions();

            ClientDiagnostics = new ClientDiagnostics(options, true);
            _tokenCredential = credential;
            _pipeline = HttpPipelineBuilder.Build(options, Array.Empty<HttpPipelinePolicy>(), new HttpPipelinePolicy[] { new BearerTokenAuthenticationPolicy(_tokenCredential, AuthorizationScopes) }, new ResponseClassifier());
            _endpoint = endpoint;
            _apiVersion = options.Version;
        }

        /// <summary> Uses a model with additional properties as an input. </summary>
        /// <param name="body"> The <see cref="IDictionary{TKey,TValue}"/> where <c>TKey</c> is of type <see cref="string"/>, where <c>TValue</c> is of type <see cref="BinaryData"/> to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        /// <include file="Docs/AdditionalPropertiesInTypeSpecClient.xml" path="doc/members/member[@name='DoInputIsAdditionalPropertiesAsync(IDictionary{string,BinaryData},CancellationToken)']/*" />
        public virtual async Task<Response> DoInputIsAdditionalPropertiesAsync(IDictionary<string, BinaryData> body, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(body, nameof(body));

            RequestContext context = FromCancellationToken(cancellationToken);
            using RequestContent content = RequestContentHelper.FromDictionary(body);
            Response response = await DoInputIsAdditionalPropertiesAsync(content, context).ConfigureAwait(false);
            return response;
        }

        /// <summary> Uses a model with additional properties as an input. </summary>
        /// <param name="body"> The <see cref="IDictionary{TKey,TValue}"/> where <c>TKey</c> is of type <see cref="string"/>, where <c>TValue</c> is of type <see cref="BinaryData"/> to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        /// <include file="Docs/AdditionalPropertiesInTypeSpecClient.xml" path="doc/members/member[@name='DoInputIsAdditionalProperties(IDictionary{string,BinaryData},CancellationToken)']/*" />
        public virtual Response DoInputIsAdditionalProperties(IDictionary<string, BinaryData> body, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(body, nameof(body));

            RequestContext context = FromCancellationToken(cancellationToken);
            using RequestContent content = RequestContentHelper.FromDictionary(body);
            Response response = DoInputIsAdditionalProperties(content, context);
            return response;
        }

        /// <summary>
        /// [Protocol Method] Uses a model with additional properties as an input
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="DoInputIsAdditionalPropertiesAsync(IDictionary{string,BinaryData},CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/AdditionalPropertiesInTypeSpecClient.xml" path="doc/members/member[@name='DoInputIsAdditionalPropertiesAsync(RequestContent,RequestContext)']/*" />
        public virtual async Task<Response> DoInputIsAdditionalPropertiesAsync(RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("AdditionalPropertiesInTypeSpecClient.DoInputIsAdditionalProperties");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDoInputIsAdditionalPropertiesRequest(content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Uses a model with additional properties as an input
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="DoInputIsAdditionalProperties(IDictionary{string,BinaryData},CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/AdditionalPropertiesInTypeSpecClient.xml" path="doc/members/member[@name='DoInputIsAdditionalProperties(RequestContent,RequestContext)']/*" />
        public virtual Response DoInputIsAdditionalProperties(RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("AdditionalPropertiesInTypeSpecClient.DoInputIsAdditionalProperties");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDoInputIsAdditionalPropertiesRequest(content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Uses a model with additional properties as an input. </summary>
        /// <param name="body"> The <see cref="InputExtendsAdditionalProperties"/> to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        /// <include file="Docs/AdditionalPropertiesInTypeSpecClient.xml" path="doc/members/member[@name='DoInputExtendsAdditionalPropertiesAsync(InputExtendsAdditionalProperties,CancellationToken)']/*" />
        public virtual async Task<Response> DoInputExtendsAdditionalPropertiesAsync(InputExtendsAdditionalProperties body, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(body, nameof(body));

            RequestContext context = FromCancellationToken(cancellationToken);
            using RequestContent content = body.ToRequestContent();
            Response response = await DoInputExtendsAdditionalPropertiesAsync(content, context).ConfigureAwait(false);
            return response;
        }

        /// <summary> Uses a model with additional properties as an input. </summary>
        /// <param name="body"> The <see cref="InputExtendsAdditionalProperties"/> to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        /// <include file="Docs/AdditionalPropertiesInTypeSpecClient.xml" path="doc/members/member[@name='DoInputExtendsAdditionalProperties(InputExtendsAdditionalProperties,CancellationToken)']/*" />
        public virtual Response DoInputExtendsAdditionalProperties(InputExtendsAdditionalProperties body, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(body, nameof(body));

            RequestContext context = FromCancellationToken(cancellationToken);
            using RequestContent content = body.ToRequestContent();
            Response response = DoInputExtendsAdditionalProperties(content, context);
            return response;
        }

        /// <summary>
        /// [Protocol Method] Uses a model with additional properties as an input
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="DoInputExtendsAdditionalPropertiesAsync(InputExtendsAdditionalProperties,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/AdditionalPropertiesInTypeSpecClient.xml" path="doc/members/member[@name='DoInputExtendsAdditionalPropertiesAsync(RequestContent,RequestContext)']/*" />
        public virtual async Task<Response> DoInputExtendsAdditionalPropertiesAsync(RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("AdditionalPropertiesInTypeSpecClient.DoInputExtendsAdditionalProperties");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDoInputExtendsAdditionalPropertiesRequest(content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Uses a model with additional properties as an input
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="DoInputExtendsAdditionalProperties(InputExtendsAdditionalProperties,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/AdditionalPropertiesInTypeSpecClient.xml" path="doc/members/member[@name='DoInputExtendsAdditionalProperties(RequestContent,RequestContext)']/*" />
        public virtual Response DoInputExtendsAdditionalProperties(RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("AdditionalPropertiesInTypeSpecClient.DoInputExtendsAdditionalProperties");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDoInputExtendsAdditionalPropertiesRequest(content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        internal HttpMessage CreateDoInputIsAdditionalPropertiesRequest(RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier204);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/doInputIsAdditionalProperties", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateDoInputExtendsAdditionalPropertiesRequest(RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier204);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/doInputExtendsAdditionalProperties", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        private static RequestContext DefaultRequestContext = new RequestContext();
        internal static RequestContext FromCancellationToken(CancellationToken cancellationToken = default)
        {
            if (!cancellationToken.CanBeCanceled)
            {
                return DefaultRequestContext;
            }

            return new RequestContext() { CancellationToken = cancellationToken };
        }

        private static ResponseClassifier _responseClassifier204;
        private static ResponseClassifier ResponseClassifier204 => _responseClassifier204 ??= new StatusCodeClassifier(stackalloc ushort[] { 204 });
    }
}
