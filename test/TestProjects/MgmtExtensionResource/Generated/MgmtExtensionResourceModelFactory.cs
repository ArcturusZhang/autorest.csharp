// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;
using Azure.ResourceManager.Models;
using MgmtExtensionResource;

namespace MgmtExtensionResource.Models
{
    /// <summary> Model factory for read-only models. </summary>
    public static partial class MgmtExtensionResourceModelFactory
    {
        /// <summary> Initializes a new instance of DnsNameAvailabilityResult. </summary>
        /// <param name="available"> Domain availability (True/False). </param>
        /// <returns> A new <see cref="Models.DnsNameAvailabilityResult"/> instance for mocking. </returns>
        public static DnsNameAvailabilityResult DnsNameAvailabilityResult(bool? available = null)
        {
            return new DnsNameAvailabilityResult(available);
        }

        /// <summary> Initializes a new instance of SubSingletonData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="something"> The something. </param>
        /// <returns> A new <see cref="MgmtExtensionResource.SubSingletonData"/> instance for mocking. </returns>
        public static SubSingletonData SubSingletonData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string something = null)
        {
            return new SubSingletonData(id, name, resourceType, systemData, something);
        }

        /// <summary> Initializes a new instance of PolicyDefinitionData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="policyType"> The type of policy definition. Possible values are NotSpecified, BuiltIn, Custom, and Static. </param>
        /// <param name="mode"> The policy definition mode. Some examples are All, Indexed, Microsoft.KeyVault.Data. </param>
        /// <param name="displayName"> The display name of the policy definition. </param>
        /// <param name="description"> The policy definition description. </param>
        /// <param name="policyRule"> The policy rule. </param>
        /// <param name="metadata"> The policy definition metadata.  Metadata is an open ended object and is typically a collection of key value pairs. </param>
        /// <param name="parameters"> The parameter definitions for parameters used in the policy rule. The keys are the parameter names. </param>
        /// <returns> A new <see cref="MgmtExtensionResource.PolicyDefinitionData"/> instance for mocking. </returns>
        public static PolicyDefinitionData PolicyDefinitionData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, PolicyType? policyType = null, string mode = null, string displayName = null, string description = null, BinaryData policyRule = null, BinaryData metadata = null, IDictionary<string, ParameterDefinitionsValue> parameters = null)
        {
            parameters ??= new Dictionary<string, ParameterDefinitionsValue>();

            return new PolicyDefinitionData(id, name, resourceType, systemData, policyType, mode, displayName, description, policyRule, metadata, parameters);
        }

        /// <summary> Initializes a new instance of ParameterDefinitionsValue. </summary>
        /// <param name="parameterType"> The data type of the parameter. </param>
        /// <param name="allowedValues"> The allowed values for the parameter. </param>
        /// <param name="defaultValue"> The default value for the parameter if no value is provided. </param>
        /// <param name="metadata"> General metadata for the parameter. </param>
        /// <returns> A new <see cref="Models.ParameterDefinitionsValue"/> instance for mocking. </returns>
        public static ParameterDefinitionsValue ParameterDefinitionsValue(ParameterType? parameterType = null, IEnumerable<BinaryData> allowedValues = null, BinaryData defaultValue = null, ParameterDefinitionsValueMetadata metadata = null)
        {
            allowedValues ??= new List<BinaryData>();

            return new ParameterDefinitionsValue(parameterType, allowedValues?.ToList(), defaultValue, metadata);
        }

        /// <summary> Initializes a new instance of ParameterDefinitionsValueMetadata. </summary>
        /// <param name="displayName"> The display name for the parameter. </param>
        /// <param name="description"> The description of the parameter. </param>
        /// <param name="strongType"> Used when assigning the policy definition through the portal. Provides a context aware list of values for the user to choose from. </param>
        /// <param name="assignPermissions"> Set to true to have Azure portal create role assignments on the resource ID or resource scope value of this parameter during policy assignment. This property is useful in case you wish to assign permissions outside the assignment scope. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.ParameterDefinitionsValueMetadata"/> instance for mocking. </returns>
        public static ParameterDefinitionsValueMetadata ParameterDefinitionsValueMetadata(string displayName = null, string description = null, string strongType = null, bool? assignPermissions = null, IDictionary<string, BinaryData> additionalProperties = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new ParameterDefinitionsValueMetadata(displayName, description, strongType, assignPermissions, additionalProperties);
        }
    }
}
