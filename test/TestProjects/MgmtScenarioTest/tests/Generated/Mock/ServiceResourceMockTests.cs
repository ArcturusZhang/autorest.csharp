// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Net;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.TestFramework;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.TestFramework;
using MgmtScenarioTest;
using MgmtScenarioTest.Models;

namespace MgmtScenarioTest.Tests.Mock
{
    /// <summary> Test for ServiceResource. </summary>
    public partial class ServiceResourceMockTests : MockTestBase
    {
        public ServiceResourceMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task CheckNameAvailabilityService()
        {
            // Example: Services_CheckNameAvailability

            var subscriptionResourceId = SubscriptionResource.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000");
            var subscriptionResource = GetArmClient().GetSubscriptionResource(subscriptionResourceId);
            await subscriptionResource.CheckNameAvailabilityServiceAsync("eastus", new NameAvailabilityContent("Microsoft.AppPlatform/Spring", "myservice"));
        }

        [RecordedTest]
        public async Task Delete()
        {
            // Example: Services_Delete

            var serviceResourceId = MgmtScenarioTest.ServiceResource.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "myservice");
            var serviceResource = GetArmClient().GetServiceResource(serviceResourceId);
            await serviceResource.DeleteAsync(WaitUntil.Completed);
        }

        [RecordedTest]
        public async Task DisableTestEndpoint()
        {
            // Example: Services_DisableTestEndpoint

            var serviceResourceId = MgmtScenarioTest.ServiceResource.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "myservice");
            var serviceResource = GetArmClient().GetServiceResource(serviceResourceId);
            await serviceResource.DisableTestEndpointAsync();
        }

        [RecordedTest]
        public async Task EnableTestEndpoint()
        {
            // Example: Services_EnableTestEndpoint

            var serviceResourceId = MgmtScenarioTest.ServiceResource.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "myservice");
            var serviceResource = GetArmClient().GetServiceResource(serviceResourceId);
            await serviceResource.EnableTestEndpointAsync();
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: Services_Get

            var serviceResourceId = MgmtScenarioTest.ServiceResource.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "myservice");
            var serviceResource = GetArmClient().GetServiceResource(serviceResourceId);
            await serviceResource.GetAsync();
        }

        [RecordedTest]
        public async Task GetForClusterDeployments()
        {
            // Example: Deployments_ListForCluster

            var serviceResourceId = MgmtScenarioTest.ServiceResource.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "myservice");
            var serviceResource = GetArmClient().GetServiceResource(serviceResourceId);
            await foreach (var _ in serviceResource.GetForClusterDeploymentsAsync())
            {
            }
        }

        [RecordedTest]
        public async Task GetServiceResources()
        {
            // Example: Services_ListBySubscription

            var subscriptionResourceId = SubscriptionResource.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000");
            var subscriptionResource = GetArmClient().GetSubscriptionResource(subscriptionResourceId);
            await foreach (var _ in subscriptionResource.GetServiceResourcesAsync())
            {
            }
        }

        [RecordedTest]
        public async Task GetTestKeys()
        {
            // Example: Services_ListTestKeys

            var serviceResourceId = MgmtScenarioTest.ServiceResource.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "myservice");
            var serviceResource = GetArmClient().GetServiceResource(serviceResourceId);
            await serviceResource.GetTestKeysAsync();
        }

        [RecordedTest]
        public async Task RegenerateTestKey()
        {
            // Example: Services_RegenerateTestKey

            var serviceResourceId = MgmtScenarioTest.ServiceResource.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "myservice");
            var serviceResource = GetArmClient().GetServiceResource(serviceResourceId);
            await serviceResource.RegenerateTestKeyAsync(new RegenerateTestKeyRequestPayload(TestKeyType.Primary));
        }

        [RecordedTest]
        public async Task Update()
        {
            // Example: Services_Update

            var serviceResourceId = MgmtScenarioTest.ServiceResource.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "myservice");
            var serviceResource = GetArmClient().GetServiceResource(serviceResourceId);
            await serviceResource.UpdateAsync(WaitUntil.Completed, new ServiceResourceData(new AzureLocation("eastus"))
            {
                Properties = new ClusterResourceProperties(),
                Sku = new MgmtScenarioTestSku()
                {
                    Name = "S0",
                    Tier = "Standard",
                },
                Tags =
{
["key1"] = "value1",
},
            });
        }

        [RecordedTest]
        public async Task ValidateConfigServer()
        {
            // Example: ConfigServers_Validate

            var serviceResourceId = MgmtScenarioTest.ServiceResource.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "myservice");
            var serviceResource = GetArmClient().GetServiceResource(serviceResourceId);
            await serviceResource.ValidateConfigServerAsync(WaitUntil.Completed, new ConfigServerSettings()
            {
                GitProperty = new ConfigServerGitProperty("https://github.com/fake-user/fake-repository.git")
                {
                    Label = "master",
                    SearchPaths =
{
"/"
},
                },
            });
        }
    }
}
