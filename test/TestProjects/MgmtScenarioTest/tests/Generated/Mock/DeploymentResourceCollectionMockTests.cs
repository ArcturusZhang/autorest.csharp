// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Net;
using System.Threading.Tasks;
using Azure;
using Azure.Core.TestFramework;
using Azure.ResourceManager.TestFramework;
using MgmtScenarioTest;
using MgmtScenarioTest.Models;

namespace MgmtScenarioTest.Tests.Mock
{
    /// <summary> Test for DeploymentResourceCollection. </summary>
    public partial class DeploymentResourceCollectionMockTests : MockTestBase
    {
        public DeploymentResourceCollectionMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task CreateOrUpdate()
        {
            // Example: Deployments_CreateOrUpdate

            var appResourceId = MgmtScenarioTest.AppResource.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "myservice", "myapp");
            var appResource = GetArmClient().GetAppResource(appResourceId);
            var collection = appResource.GetDeploymentResources();
            await collection.CreateOrUpdateAsync(WaitUntil.Completed, "mydeployment", new DeploymentResourceData()
            {
                Properties = new DeploymentResourceProperties()
                {
                    Source = new UserSourceInfo()
                    {
                        SourceType = UserSourceType.Source,
                        RelativePath = "resources/a172cedcae47474b615c54d510a5d84a8dea3032e958587430b413538be3f333-2019082605-e3095339-1723-44b7-8b5e-31b1003978bc",
                        Version = "1.0",
                        ArtifactSelector = "sub-module-1",
                    },
                    DeploymentSettings = new DeploymentSettings()
                    {
                        Cpu = 1,
                        MemoryInGB = 3,
                        JvmOptions = "-Xms1G -Xmx3G",
                        EnvironmentVariables =
{
["env"] = "test",
},
                        RuntimeVersion = RuntimeVersion.Java8,
                    },
                },
                Sku = new MgmtScenarioTestSku()
                {
                    Name = "S0",
                    Tier = "Standard",
                    Capacity = 1,
                },
            });
        }

        [RecordedTest]
        public async Task Exists()
        {
            // Example: Deployments_Get

            var appResourceId = MgmtScenarioTest.AppResource.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "myservice", "myapp");
            var appResource = GetArmClient().GetAppResource(appResourceId);
            var collection = appResource.GetDeploymentResources();
            await collection.ExistsAsync("mydeployment");
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: Deployments_Get

            var appResourceId = MgmtScenarioTest.AppResource.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "myservice", "myapp");
            var appResource = GetArmClient().GetAppResource(appResourceId);
            var collection = appResource.GetDeploymentResources();
            await collection.GetAsync("mydeployment");
        }

        [RecordedTest]
        public async Task GetAll()
        {
            // Example: Deployments_List

            var appResourceId = MgmtScenarioTest.AppResource.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "myservice", "myapp");
            var appResource = GetArmClient().GetAppResource(appResourceId);
            var collection = appResource.GetDeploymentResources();
            await foreach (var _ in collection.GetAllAsync())
            {
            }
        }
    }
}
