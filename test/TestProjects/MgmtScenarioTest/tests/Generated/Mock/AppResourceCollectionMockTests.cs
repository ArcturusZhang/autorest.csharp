// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Net;
using System.Threading.Tasks;
using Azure;
using Azure.Core.TestFramework;
using Azure.ResourceManager.TestFramework;
using MgmtScenarioTest;
using MgmtScenarioTest.Models;

namespace MgmtScenarioTest.Tests.Mock
{
    /// <summary> Test for AppResourceCollection. </summary>
    public partial class AppResourceCollectionMockTests : MockTestBase
    {
        public AppResourceCollectionMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task CreateOrUpdate()
        {
            // Example: Apps_CreateOrUpdate

            var serviceResourceId = MgmtScenarioTest.ServiceResource.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "myservice");
            var serviceResource = GetArmClient().GetServiceResource(serviceResourceId);
            var collection = serviceResource.GetAppResources();
            await collection.CreateOrUpdateAsync(WaitUntil.Completed, "myapp", new AppResourceData()
            {
                Properties = new AppResourceProperties()
                {
                    Public = true,
                    ActiveDeploymentName = "mydeployment1",
                    Fqdn = "myapp.mydomain.com",
                    HttpsOnly = false,
                    TemporaryDisk = new TemporaryDisk()
                    {
                        SizeInGB = 2,
                        MountPath = "/mytemporarydisk",
                    },
                    PersistentDisk = new PersistentDisk()
                    {
                        SizeInGB = 2,
                        MountPath = "/mypersistentdisk",
                    },
                    EnableEndToEndTLS = false,
                },
                Identity = new ManagedIdentityProperties(),
                Location = "eastus",
            });
        }

        [RecordedTest]
        public async Task Exists()
        {
            // Example: Apps_Get

            var serviceResourceId = MgmtScenarioTest.ServiceResource.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "myservice");
            var serviceResource = GetArmClient().GetServiceResource(serviceResourceId);
            var collection = serviceResource.GetAppResources();
            await collection.ExistsAsync("myapp");
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: Apps_Get

            var serviceResourceId = MgmtScenarioTest.ServiceResource.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "myservice");
            var serviceResource = GetArmClient().GetServiceResource(serviceResourceId);
            var collection = serviceResource.GetAppResources();
            await collection.GetAsync("myapp");
        }

        [RecordedTest]
        public async Task GetAll()
        {
            // Example: Apps_List

            var serviceResourceId = MgmtScenarioTest.ServiceResource.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "myservice");
            var serviceResource = GetArmClient().GetServiceResource(serviceResourceId);
            var collection = serviceResource.GetAppResources();
            await foreach (var _ in collection.GetAllAsync())
            {
            }
        }
    }
}
