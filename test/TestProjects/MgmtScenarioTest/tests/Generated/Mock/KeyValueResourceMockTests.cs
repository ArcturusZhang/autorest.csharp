// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Net;
using System.Threading.Tasks;
using Azure;
using Azure.Core.TestFramework;
using Azure.ResourceManager.TestFramework;
using MgmtScenarioTest;

namespace MgmtScenarioTest.Tests.Mock
{
    /// <summary> Test for KeyValueResource. </summary>
    public partial class KeyValueResourceMockTests : MockTestBase
    {
        public KeyValueResourceMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task Delete()
        {
            // Example: KeyValues_Delete

            var keyValueResourceId = MgmtScenarioTest.KeyValueResource.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "contoso", "myKey$myLabel");
            var keyValueResource = GetArmClient().GetKeyValueResource(keyValueResourceId);
            await keyValueResource.DeleteAsync(WaitUntil.Completed);
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: KeyValues_Get

            var keyValueResourceId = MgmtScenarioTest.KeyValueResource.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "contoso", "myKey$myLabel");
            var keyValueResource = GetArmClient().GetKeyValueResource(keyValueResourceId);
            await keyValueResource.GetAsync();
        }

        [RecordedTest]
        public async Task Update()
        {
            // Example: KeyValues_CreateOrUpdate

            var keyValueResourceId = MgmtScenarioTest.KeyValueResource.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "contoso", "myKey$myLabel");
            var keyValueResource = GetArmClient().GetKeyValueResource(keyValueResourceId);
            await keyValueResource.UpdateAsync(WaitUntil.Completed, data: new KeyValueData()
            {
                Value = "myValue",
                Tags =
{
["tag1"] = "tagValue1",
["tag2"] = "tagValue2",
},
            });
        }
    }
}
