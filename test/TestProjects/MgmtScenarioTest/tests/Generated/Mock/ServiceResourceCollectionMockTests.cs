// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Net;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.TestFramework;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.TestFramework;
using MgmtScenarioTest;
using MgmtScenarioTest.Models;

namespace MgmtScenarioTest.Tests.Mock
{
    /// <summary> Test for ServiceResourceCollection. </summary>
    public partial class ServiceResourceCollectionMockTests : MockTestBase
    {
        public ServiceResourceCollectionMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task CreateOrUpdate_ServicesCreateOrUpdate()
        {
            // Example: Services_CreateOrUpdate

            var resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup");
            var resourceGroupResource = GetArmClient().GetResourceGroupResource(resourceGroupResourceId);
            var collection = resourceGroupResource.GetServiceResources();
            await collection.CreateOrUpdateAsync(WaitUntil.Completed, "myservice", new ServiceResourceData(new AzureLocation("eastus"))
            {
                Properties = new ClusterResourceProperties(),
                Sku = new MgmtScenarioTestSku()
                {
                    Name = "S0",
                    Tier = "Standard",
                },
                Tags =
{
["key1"] = "value1",
},
            });
        }

        [RecordedTest]
        public async Task CreateOrUpdate_ServicesCreateOrUpdateVNetInjection()
        {
            // Example: Services_CreateOrUpdate_VNetInjection

            var resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup");
            var resourceGroupResource = GetArmClient().GetResourceGroupResource(resourceGroupResourceId);
            var collection = resourceGroupResource.GetServiceResources();
            await collection.CreateOrUpdateAsync(WaitUntil.Completed, "myservice", new ServiceResourceData(new AzureLocation("eastus"))
            {
                Properties = new ClusterResourceProperties()
                {
                    NetworkProfile = new NetworkProfile()
                    {
                        ServiceRuntimeSubnetId = "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/myVirtualNetwork/subnets/serviceRuntime",
                        AppSubnetId = "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/myVirtualNetwork/subnets/apps",
                        ServiceCidr = "10.8.0.0/16,10.244.0.0/16,10.245.0.1/16",
                        ServiceRuntimeNetworkResourceGroup = "my-service-runtime-network-rg",
                        AppNetworkResourceGroup = "my-app-network-rg",
                    },
                },
                Sku = new MgmtScenarioTestSku()
                {
                    Name = "S0",
                    Tier = "Standard",
                },
                Tags =
{
["key1"] = "value1",
},
            });
        }

        [RecordedTest]
        public async Task Exists()
        {
            // Example: Services_Get

            var resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup");
            var resourceGroupResource = GetArmClient().GetResourceGroupResource(resourceGroupResourceId);
            var collection = resourceGroupResource.GetServiceResources();
            await collection.ExistsAsync("myservice");
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: Services_Get

            var resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup");
            var resourceGroupResource = GetArmClient().GetResourceGroupResource(resourceGroupResourceId);
            var collection = resourceGroupResource.GetServiceResources();
            await collection.GetAsync("myservice");
        }

        [RecordedTest]
        public async Task GetAll()
        {
            // Example: Services_List

            var resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup");
            var resourceGroupResource = GetArmClient().GetResourceGroupResource(resourceGroupResourceId);
            var collection = resourceGroupResource.GetServiceResources();
            await foreach (var _ in collection.GetAllAsync())
            {
            }
        }
    }
}
