// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Net;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.TestFramework;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.TestFramework;
using MgmtScenarioTest;
using MgmtScenarioTest.Models;

namespace MgmtScenarioTest.Tests.Mock
{
    /// <summary> Test for ConfigurationStoreCollection. </summary>
    public partial class ConfigurationStoreCollectionMockTests : MockTestBase
    {
        public ConfigurationStoreCollectionMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task CreateOrUpdate_ConfigurationStoresCreate()
        {
            // Example: ConfigurationStores_Create

            var resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup");
            var resourceGroupResource = GetArmClient().GetResourceGroupResource(resourceGroupResourceId);
            var collection = resourceGroupResource.GetConfigurationStores();
            await collection.CreateOrUpdateAsync(WaitUntil.Completed, "contoso", new ConfigurationStoreData(new AzureLocation("westus"), new MgmtScenarioTestSku("Standard"))
            {
                Tags =
{
["myTag"] = "myTagValue",
},
            });
        }

        [RecordedTest]
        public async Task CreateOrUpdate_ConfigurationStoresCreateWithIdentity()
        {
            // Example: ConfigurationStores_Create_With_Identity

            var resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup");
            var resourceGroupResource = GetArmClient().GetResourceGroupResource(resourceGroupResourceId);
            var collection = resourceGroupResource.GetConfigurationStores();
            await collection.CreateOrUpdateAsync(WaitUntil.Completed, "contoso", new ConfigurationStoreData(new AzureLocation("westus"), new MgmtScenarioTestSku("Standard"))
            {
                Identity = new ManagedServiceIdentity("SystemAssigned, UserAssigned")
                {
                    UserAssignedIdentities =
{
[new ResourceIdentifier("/subscriptions/c80fb759-c965-4c6a-9110-9b2b2d038882/resourcegroups/myResourceGroup1/providers/Microsoft.ManagedIdentity/userAssignedIdentities/identity2")] = new UserAssignedIdentity(),
},
                },
                Tags =
{
["myTag"] = "myTagValue",
},
            });
        }

        [RecordedTest]
        public async Task CreateOrUpdate_ConfigurationStoresCreateWithLocalAuthDisabled()
        {
            // Example: ConfigurationStores_Create_With_Local_Auth_Disabled

            var resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup");
            var resourceGroupResource = GetArmClient().GetResourceGroupResource(resourceGroupResourceId);
            var collection = resourceGroupResource.GetConfigurationStores();
            await collection.CreateOrUpdateAsync(WaitUntil.Completed, "contoso", new ConfigurationStoreData(new AzureLocation("westus"), new MgmtScenarioTestSku("Standard"))
            {
                DisableLocalAuth = true,
            });
        }

        [RecordedTest]
        public async Task Exists()
        {
            // Example: ConfigurationStores_Get

            var resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup");
            var resourceGroupResource = GetArmClient().GetResourceGroupResource(resourceGroupResourceId);
            var collection = resourceGroupResource.GetConfigurationStores();
            await collection.ExistsAsync("contoso");
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: ConfigurationStores_Get

            var resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup");
            var resourceGroupResource = GetArmClient().GetResourceGroupResource(resourceGroupResourceId);
            var collection = resourceGroupResource.GetConfigurationStores();
            await collection.GetAsync("contoso");
        }

        [RecordedTest]
        public async Task GetAll()
        {
            // Example: ConfigurationStores_ListByResourceGroup

            var resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup");
            var resourceGroupResource = GetArmClient().GetResourceGroupResource(resourceGroupResourceId);
            var collection = resourceGroupResource.GetConfigurationStores();
            await foreach (var _ in collection.GetAllAsync())
            {
            }
        }
    }
}
