// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Net;
using System.Threading.Tasks;
using Azure;
using Azure.Core.TestFramework;
using Azure.ResourceManager.TestFramework;
using MgmtScenarioTest;
using MgmtScenarioTest.Models;

namespace MgmtScenarioTest.Tests.Mock
{
    /// <summary> Test for BindingResource. </summary>
    public partial class BindingResourceMockTests : MockTestBase
    {
        public BindingResourceMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task Delete()
        {
            // Example: Bindings_Delete

            var bindingResourceId = MgmtScenarioTest.BindingResource.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "myservice", "myapp", "mybinding");
            var bindingResource = GetArmClient().GetBindingResource(bindingResourceId);
            await bindingResource.DeleteAsync(WaitUntil.Completed);
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: Bindings_Get

            var bindingResourceId = MgmtScenarioTest.BindingResource.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "myservice", "myapp", "mybinding");
            var bindingResource = GetArmClient().GetBindingResource(bindingResourceId);
            await bindingResource.GetAsync();
        }

        [RecordedTest]
        public async Task Update()
        {
            // Example: Bindings_Update

            var bindingResourceId = MgmtScenarioTest.BindingResource.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "myservice", "myapp", "mybinding");
            var bindingResource = GetArmClient().GetBindingResource(bindingResourceId);
            await bindingResource.UpdateAsync(WaitUntil.Completed, new BindingResourceData()
            {
                Properties = new BindingResourceProperties()
                {
                    Key = "xxxx",
                    BindingParameters =
{
["apiType"] = BinaryData.FromString("SQL"),
["databaseName"] = BinaryData.FromString("db1"),
},
                },
            });
        }
    }
}
