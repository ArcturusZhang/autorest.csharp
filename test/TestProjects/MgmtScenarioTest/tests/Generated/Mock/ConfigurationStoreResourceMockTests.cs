// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Net;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.TestFramework;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.TestFramework;
using MgmtScenarioTest;
using MgmtScenarioTest.Models;

namespace MgmtScenarioTest.Tests.Mock
{
    /// <summary> Test for ConfigurationStoreResource. </summary>
    public partial class ConfigurationStoreResourceMockTests : MockTestBase
    {
        public ConfigurationStoreResourceMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task Delete()
        {
            // Example: ConfigurationStores_Delete

            var configurationStoreResourceId = MgmtScenarioTest.ConfigurationStoreResource.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "contoso");
            var configurationStoreResource = GetArmClient().GetConfigurationStoreResource(configurationStoreResourceId);
            await configurationStoreResource.DeleteAsync(WaitUntil.Completed);
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: ConfigurationStores_Get

            var configurationStoreResourceId = MgmtScenarioTest.ConfigurationStoreResource.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "contoso");
            var configurationStoreResource = GetArmClient().GetConfigurationStoreResource(configurationStoreResourceId);
            await configurationStoreResource.GetAsync();
        }

        [RecordedTest]
        public async Task GetConfigurationStores()
        {
            // Example: ConfigurationStores_List

            var subscriptionResourceId = SubscriptionResource.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000");
            var subscriptionResource = GetArmClient().GetSubscriptionResource(subscriptionResourceId);
            await foreach (var _ in subscriptionResource.GetConfigurationStoresAsync())
            {
            }
        }

        [RecordedTest]
        public async Task GetKeys()
        {
            // Example: ConfigurationStores_ListKeys

            var configurationStoreResourceId = MgmtScenarioTest.ConfigurationStoreResource.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "contoso");
            var configurationStoreResource = GetArmClient().GetConfigurationStoreResource(configurationStoreResourceId);
            await foreach (var _ in configurationStoreResource.GetKeysAsync())
            {
            }
        }

        [RecordedTest]
        public async Task RegenerateKey()
        {
            // Example: ConfigurationStores_RegenerateKey

            var configurationStoreResourceId = MgmtScenarioTest.ConfigurationStoreResource.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "contoso");
            var configurationStoreResource = GetArmClient().GetConfigurationStoreResource(configurationStoreResourceId);
            await configurationStoreResource.RegenerateKeyAsync(new RegenerateKeyContent()
            {
                Id = "439AD01B4BE67DB1",
            });
        }

        [RecordedTest]
        public async Task Update_ConfigurationStoresUpdate()
        {
            // Example: ConfigurationStores_Update

            var configurationStoreResourceId = MgmtScenarioTest.ConfigurationStoreResource.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "contoso");
            var configurationStoreResource = GetArmClient().GetConfigurationStoreResource(configurationStoreResourceId);
            await configurationStoreResource.UpdateAsync(WaitUntil.Completed, new ConfigurationStorePatch()
            {
                SkuName = "Standard",
                Tags =
{
["Category"] = "Marketing",
},
            });
        }

        [RecordedTest]
        public async Task Update_ConfigurationStoresUpdateDisableLocalAuth()
        {
            // Example: ConfigurationStores_Update_Disable_Local_Auth

            var configurationStoreResourceId = MgmtScenarioTest.ConfigurationStoreResource.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "contoso");
            var configurationStoreResource = GetArmClient().GetConfigurationStoreResource(configurationStoreResourceId);
            await configurationStoreResource.UpdateAsync(WaitUntil.Completed, new ConfigurationStorePatch()
            {
                SkuName = "Standard",
                DisableLocalAuth = true,
            });
        }

        [RecordedTest]
        public async Task Update_ConfigurationStoresUpdateWithIdentity()
        {
            // Example: ConfigurationStores_Update_With_Identity

            var configurationStoreResourceId = MgmtScenarioTest.ConfigurationStoreResource.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "contoso");
            var configurationStoreResource = GetArmClient().GetConfigurationStoreResource(configurationStoreResourceId);
            await configurationStoreResource.UpdateAsync(WaitUntil.Completed, new ConfigurationStorePatch()
            {
                Identity = new ManagedServiceIdentity("SystemAssigned, UserAssigned")
                {
                    UserAssignedIdentities =
{
[new ResourceIdentifier("/subscriptions/c80fb759-c965-4c6a-9110-9b2b2d038882/resourcegroups/myResourceGroup1/providers/Microsoft.ManagedIdentity/userAssignedIdentities/identity2")] = new UserAssignedIdentity(),
},
                },
                SkuName = "Standard",
                Tags =
{
["Category"] = "Marketing",
},
            });
        }
    }
}
