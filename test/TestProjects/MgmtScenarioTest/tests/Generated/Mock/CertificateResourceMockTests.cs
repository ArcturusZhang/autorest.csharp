// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Net;
using System.Threading.Tasks;
using Azure;
using Azure.Core.TestFramework;
using Azure.ResourceManager.TestFramework;
using MgmtScenarioTest;
using MgmtScenarioTest.Models;

namespace MgmtScenarioTest.Tests.Mock
{
    /// <summary> Test for CertificateResource. </summary>
    public partial class CertificateResourceMockTests : MockTestBase
    {
        public CertificateResourceMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task Delete()
        {
            // Example: Certificates_Delete

            var certificateResourceId = MgmtScenarioTest.CertificateResource.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "myservice", "mycertificate");
            var certificateResource = GetArmClient().GetCertificateResource(certificateResourceId);
            await certificateResource.DeleteAsync(WaitUntil.Completed);
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: Certificates_Get

            var certificateResourceId = MgmtScenarioTest.CertificateResource.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "myservice", "mycertificate");
            var certificateResource = GetArmClient().GetCertificateResource(certificateResourceId);
            await certificateResource.GetAsync();
        }

        [RecordedTest]
        public async Task Update()
        {
            // Example: Certificates_CreateOrUpdate

            var certificateResourceId = MgmtScenarioTest.CertificateResource.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "myservice", "mycertificate");
            var certificateResource = GetArmClient().GetCertificateResource(certificateResourceId);
            await certificateResource.UpdateAsync(WaitUntil.Completed, new CertificateResourceData()
            {
                Properties = new CertificateProperties("https://myvault.vault.azure.net", "mycert")
                {
                    CertVersion = "08a219d06d874795a96db47e06fbb01e",
                },
            });
        }
    }
}
