// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace MgmtScenarioTest.Models
{
    public partial class DeploymentSettings : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(Cpu))
            {
                writer.WritePropertyName("cpu");
                writer.WriteNumberValue(Cpu.Value);
            }
            if (Optional.IsDefined(MemoryInGB))
            {
                writer.WritePropertyName("memoryInGB");
                writer.WriteNumberValue(MemoryInGB.Value);
            }
            if (Optional.IsDefined(JvmOptions))
            {
                writer.WritePropertyName("jvmOptions");
                writer.WriteStringValue(JvmOptions);
            }
            if (Optional.IsDefined(NetCoreMainEntryPath))
            {
                writer.WritePropertyName("netCoreMainEntryPath");
                writer.WriteStringValue(NetCoreMainEntryPath);
            }
            if (Optional.IsCollectionDefined(EnvironmentVariables))
            {
                writer.WritePropertyName("environmentVariables");
                writer.WriteStartObject();
                foreach (var item in EnvironmentVariables)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteStringValue(item.Value);
                }
                writer.WriteEndObject();
            }
            if (Optional.IsDefined(RuntimeVersion))
            {
                writer.WritePropertyName("runtimeVersion");
                writer.WriteStringValue(RuntimeVersion.Value.ToString());
            }
            writer.WriteEndObject();
        }

        internal static DeploymentSettings DeserializeDeploymentSettings(JsonElement element)
        {
            Optional<int> cpu = default;
            Optional<int> memoryInGB = default;
            Optional<string> jvmOptions = default;
            Optional<string> netCoreMainEntryPath = default;
            Optional<IDictionary<string, string>> environmentVariables = default;
            Optional<RuntimeVersion> runtimeVersion = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("cpu"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    cpu = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("memoryInGB"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    memoryInGB = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("jvmOptions"))
                {
                    jvmOptions = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("netCoreMainEntryPath"))
                {
                    netCoreMainEntryPath = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("environmentVariables"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    Dictionary<string, string> dictionary = new Dictionary<string, string>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetString());
                    }
                    environmentVariables = dictionary;
                    continue;
                }
                if (property.NameEquals("runtimeVersion"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    runtimeVersion = new RuntimeVersion(property.Value.GetString());
                    continue;
                }
            }
            return new DeploymentSettings(Optional.ToNullable(cpu), Optional.ToNullable(memoryInGB), jvmOptions.Value, netCoreMainEntryPath.Value, Optional.ToDictionary(environmentVariables), Optional.ToNullable(runtimeVersion));
        }
    }
}
