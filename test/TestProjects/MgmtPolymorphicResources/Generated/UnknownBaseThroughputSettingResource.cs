// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.ResourceManager;
using Azure.ResourceManager.Resources;
using MgmtPolymorphicResources.Models;

namespace MgmtPolymorphicResources
{
    /// <summary>
    /// A Class representing an UnknownBaseThroughputSetting along with the instance operations that can be performed on it.
    /// If you have a <see cref="ResourceIdentifier" /> you can construct an <see cref="UnknownBaseThroughputSettingResource" />
    /// from an instance of <see cref="ArmClient" /> using the GetUnknownBaseThroughputSettingResource method.
    /// Otherwise you can get one from its parent resource <see cref="TenantResource" /> using the GetUnknownBaseThroughputSetting method.
    /// </summary>
    internal partial class UnknownBaseThroughputSettingResource : BaseThroughputSettingResource
    {
        /// <summary> Initializes a new instance of the <see cref="UnknownBaseThroughputSettingResource"/> class for mocking. </summary>
        protected UnknownBaseThroughputSettingResource()
        {
        }

        /// <summary> Initializes a new instance of the <see cref = "UnknownBaseThroughputSettingResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="data"> The resource that is the target of operations. </param>
        internal UnknownBaseThroughputSettingResource(ArmClient client, ThroughputSettingData data) : base(client, data)
        {
        }

        /// <summary> Initializes a new instance of the <see cref="UnknownBaseThroughputSettingResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal UnknownBaseThroughputSettingResource(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
        }

        /// <summary>
        /// The default implementation for operation Get
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/throughputSettings/default
        /// Operation Id: CassandraResources_GetCassandraKeyspaceThroughput
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        protected override async Task<Response<BaseThroughputSettingResource>> GetCoreAsync(CancellationToken cancellationToken = default)
        {
            await Task.Run(() => _ = 1);
            throw new NotImplementedException();
        }

        /// <summary>
        /// The default implementation for operation Get
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/throughputSettings/default
        /// Operation Id: CassandraResources_GetCassandraKeyspaceThroughput
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        protected override Response<BaseThroughputSettingResource> GetCore(CancellationToken cancellationToken = default)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// The default implementation for operation CreateOrUpdate
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/throughputSettings/default
        /// Operation Id: CassandraResources_UpdateCassandraKeyspaceThroughput
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="updateThroughputParameters"> The RUs per second of the parameters to provide for the current Cassandra Keyspace. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        protected override async Task<ArmOperation<BaseThroughputSettingResource>> CreateOrUpdateCoreAsync(WaitUntil waitUntil, ThroughputSettingsUpdateParameters updateThroughputParameters, CancellationToken cancellationToken = default)
        {
            await Task.Run(() => _ = 1);
            throw new NotImplementedException();
        }

        /// <summary>
        /// The default implementation for operation CreateOrUpdate
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/throughputSettings/default
        /// Operation Id: CassandraResources_UpdateCassandraKeyspaceThroughput
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="updateThroughputParameters"> The RUs per second of the parameters to provide for the current Cassandra Keyspace. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        protected override ArmOperation<BaseThroughputSettingResource> CreateOrUpdateCore(WaitUntil waitUntil, ThroughputSettingsUpdateParameters updateThroughputParameters, CancellationToken cancellationToken = default)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// The default implementation for operation AddTag
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/throughputSettings/default
        /// Operation Id: CassandraResources_GetCassandraKeyspaceThroughput
        /// </summary>
        /// <param name="key"> The key for the tag. </param>
        /// <param name="value"> The value for the tag. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        protected override async Task<Response<BaseThroughputSettingResource>> AddTagCoreAsync(string key, string value, CancellationToken cancellationToken = default)
        {
            await Task.Run(() => _ = 1);
            throw new NotImplementedException();
        }

        /// <summary>
        /// The default implementation for operation AddTag
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/throughputSettings/default
        /// Operation Id: CassandraResources_GetCassandraKeyspaceThroughput
        /// </summary>
        /// <param name="key"> The key for the tag. </param>
        /// <param name="value"> The value for the tag. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        protected override Response<BaseThroughputSettingResource> AddTagCore(string key, string value, CancellationToken cancellationToken = default)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// The default implementation for operation SetTags
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/throughputSettings/default
        /// Operation Id: CassandraResources_GetCassandraKeyspaceThroughput
        /// </summary>
        /// <param name="tags"> The set of tags to use as replacement. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        protected override async Task<Response<BaseThroughputSettingResource>> SetTagsCoreAsync(IDictionary<string, string> tags, CancellationToken cancellationToken = default)
        {
            await Task.Run(() => _ = 1);
            throw new NotImplementedException();
        }

        /// <summary>
        /// The default implementation for operation SetTags
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/throughputSettings/default
        /// Operation Id: CassandraResources_GetCassandraKeyspaceThroughput
        /// </summary>
        /// <param name="tags"> The set of tags to use as replacement. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        protected override Response<BaseThroughputSettingResource> SetTagsCore(IDictionary<string, string> tags, CancellationToken cancellationToken = default)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// The default implementation for operation RemoveTag
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/throughputSettings/default
        /// Operation Id: CassandraResources_GetCassandraKeyspaceThroughput
        /// </summary>
        /// <param name="key"> The key for the tag. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        protected override async Task<Response<BaseThroughputSettingResource>> RemoveTagCoreAsync(string key, CancellationToken cancellationToken = default)
        {
            await Task.Run(() => _ = 1);
            throw new NotImplementedException();
        }

        /// <summary>
        /// The default implementation for operation RemoveTag
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/throughputSettings/default
        /// Operation Id: CassandraResources_GetCassandraKeyspaceThroughput
        /// </summary>
        /// <param name="key"> The key for the tag. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        protected override Response<BaseThroughputSettingResource> RemoveTagCore(string key, CancellationToken cancellationToken = default)
        {
            throw new NotImplementedException();
        }
    }
}
