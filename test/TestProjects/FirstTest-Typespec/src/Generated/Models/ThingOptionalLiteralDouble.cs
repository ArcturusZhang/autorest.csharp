// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;
using System.Globalization;

namespace TypeSpecFirstTest.Models
{
    /// <summary> The Thing_optionalLiteralDouble. </summary>
    public readonly partial struct ThingOptionalLiteralDouble : IEquatable<ThingOptionalLiteralDouble>
    {
        private readonly float _value;

        /// <summary> Initializes a new instance of <see cref="ThingOptionalLiteralDouble"/>. </summary>
        public ThingOptionalLiteralDouble(float value)
        {
            _value = value;
        }

        private const float _456Value = 4.56F;

        /// <summary> 4.56. </summary>
        public static ThingOptionalLiteralDouble _456 { get; } = new ThingOptionalLiteralDouble(_456Value);

        internal float ToSerialSingle() => _value;

        /// <summary> Determines if two <see cref="ThingOptionalLiteralDouble"/> values are the same. </summary>
        public static bool operator ==(ThingOptionalLiteralDouble left, ThingOptionalLiteralDouble right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ThingOptionalLiteralDouble"/> values are not the same. </summary>
        public static bool operator !=(ThingOptionalLiteralDouble left, ThingOptionalLiteralDouble right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="ThingOptionalLiteralDouble"/>. </summary>
        public static implicit operator ThingOptionalLiteralDouble(float value) => new ThingOptionalLiteralDouble(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ThingOptionalLiteralDouble other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ThingOptionalLiteralDouble other) => Equals(_value, other._value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value.GetHashCode();
        /// <inheritdoc />
        public override string ToString() => _value.ToString(CultureInfo.InvariantCulture);
    }
}
