// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

namespace Inheritance.Models
{
    /// <summary> Model factory for generated models. </summary>
    public static partial class SchemaMappingModelFactory
    {
        /// <summary> Initializes a new instance of BaseClass. </summary>
        /// <param name="baseClassProperty"></param>
        /// <returns> A new <see cref="Models.BaseClass"/> instance for mocking. </returns>
        public static BaseClass BaseClass(string baseClassProperty = null)
        {
            return new BaseClass(baseClassProperty);
        }

        /// <summary> Initializes a new instance of BaseClassWithDiscriminator. </summary>
        /// <param name="baseClassProperty"></param>
        /// <param name="discriminatorProperty"></param>
        /// <returns> A new <see cref="Models.BaseClassWithDiscriminator"/> instance for mocking. </returns>
        public static BaseClassWithDiscriminator BaseClassWithDiscriminator(string baseClassProperty = null, string discriminatorProperty = null)
        {
            return new UnknownBaseClassWithDiscriminator(baseClassProperty, discriminatorProperty);
        }

        /// <summary> Initializes a new instance of SomeProperties. </summary>
        /// <param name="someProperty"></param>
        /// <param name="someOtherProperty"></param>
        /// <returns> A new <see cref="Models.SomeProperties"/> instance for mocking. </returns>
        public static SomeProperties SomeProperties(string someProperty = null, string someOtherProperty = null)
        {
            return new SomeProperties(someProperty, someOtherProperty);
        }

        /// <summary> Initializes a new instance of ClassThatInheritsFromBaseClassAndSomeProperties. </summary>
        /// <param name="baseClassProperty"></param>
        /// <param name="someProperty"></param>
        /// <param name="someOtherProperty"></param>
        /// <returns> A new <see cref="Models.ClassThatInheritsFromBaseClassAndSomeProperties"/> instance for mocking. </returns>
        public static ClassThatInheritsFromBaseClassAndSomeProperties ClassThatInheritsFromBaseClassAndSomeProperties(string baseClassProperty = null, string someProperty = null, string someOtherProperty = null)
        {
            return new ClassThatInheritsFromBaseClassAndSomeProperties(baseClassProperty, someProperty, someOtherProperty);
        }

        /// <summary> Initializes a new instance of ClassThatInheritsFromBaseClass. </summary>
        /// <param name="baseClassProperty"></param>
        /// <returns> A new <see cref="Models.ClassThatInheritsFromBaseClass"/> instance for mocking. </returns>
        public static ClassThatInheritsFromBaseClass ClassThatInheritsFromBaseClass(string baseClassProperty = null)
        {
            return new ClassThatInheritsFromBaseClass(baseClassProperty);
        }

        /// <summary> Initializes a new instance of ClassThatInheritsFromBaseClassWithDiscriminator. </summary>
        /// <param name="baseClassProperty"></param>
        /// <returns> A new <see cref="Models.ClassThatInheritsFromBaseClassWithDiscriminator"/> instance for mocking. </returns>
        public static ClassThatInheritsFromBaseClassWithDiscriminator ClassThatInheritsFromBaseClassWithDiscriminator(string baseClassProperty = null)
        {
            return new ClassThatInheritsFromBaseClassWithDiscriminator(baseClassProperty, "ClassThatInheritsFromBaseClassWithDiscriminator");
        }

        /// <summary> Initializes a new instance of ClassThatInheritsFromBaseClassWithDiscriminatorAndSomeProperties. </summary>
        /// <param name="baseClassProperty"></param>
        /// <param name="someProperty"></param>
        /// <param name="someOtherProperty"></param>
        /// <returns> A new <see cref="Models.ClassThatInheritsFromBaseClassWithDiscriminatorAndSomeProperties"/> instance for mocking. </returns>
        public static ClassThatInheritsFromBaseClassWithDiscriminatorAndSomeProperties ClassThatInheritsFromBaseClassWithDiscriminatorAndSomeProperties(string baseClassProperty = null, string someProperty = null, string someOtherProperty = null)
        {
            return new ClassThatInheritsFromBaseClassWithDiscriminatorAndSomeProperties(baseClassProperty, "ClassThatInheritsFromBaseClassWithDiscriminatorAndSomeProperties", someProperty, someOtherProperty);
        }

        /// <summary> Initializes a new instance of ClassThatInheritsFromBaseClassAndRedefinesAProperty. </summary>
        /// <param name="baseClassProperty"></param>
        /// <returns> A new <see cref="Models.ClassThatInheritsFromBaseClassAndRedefinesAProperty"/> instance for mocking. </returns>
        public static ClassThatInheritsFromBaseClassAndRedefinesAProperty ClassThatInheritsFromBaseClassAndRedefinesAProperty(string baseClassProperty = null)
        {
            return new ClassThatInheritsFromBaseClassAndRedefinesAProperty(baseClassProperty);
        }

        /// <summary> Initializes a new instance of ClassThatInheritsFromSomePropertiesAndBaseClass. </summary>
        /// <param name="someProperty"></param>
        /// <param name="someOtherProperty"></param>
        /// <param name="baseClassProperty"></param>
        /// <returns> A new <see cref="Models.ClassThatInheritsFromSomePropertiesAndBaseClass"/> instance for mocking. </returns>
        public static ClassThatInheritsFromSomePropertiesAndBaseClass ClassThatInheritsFromSomePropertiesAndBaseClass(string someProperty = null, string someOtherProperty = null, string baseClassProperty = null)
        {
            return new ClassThatInheritsFromSomePropertiesAndBaseClass(someProperty, someOtherProperty, baseClassProperty);
        }

        /// <summary> Initializes a new instance of ClassThatInheritsFromSomePropertiesAndBaseClassAndRedefinesAProperty. </summary>
        /// <param name="someProperty"></param>
        /// <param name="someOtherProperty"></param>
        /// <param name="baseClassProperty"></param>
        /// <returns> A new <see cref="Models.ClassThatInheritsFromSomePropertiesAndBaseClassAndRedefinesAProperty"/> instance for mocking. </returns>
        public static ClassThatInheritsFromSomePropertiesAndBaseClassAndRedefinesAProperty ClassThatInheritsFromSomePropertiesAndBaseClassAndRedefinesAProperty(string someProperty = null, string someOtherProperty = null, string baseClassProperty = null)
        {
            return new ClassThatInheritsFromSomePropertiesAndBaseClassAndRedefinesAProperty(someProperty, someOtherProperty, baseClassProperty);
        }
    }
}
