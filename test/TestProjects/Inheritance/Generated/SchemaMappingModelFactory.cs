// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core.Expressions.DataFactory;

namespace Inheritance.Models
{
    /// <summary> Model factory for generated models. </summary>
    public static partial class SchemaMappingModelFactory
    {
        /// <summary> Initializes a new instance of BaseClass. </summary>
        /// <param name="baseClassProperty"></param>
        /// <param name="dfeString"> Any object. </param>
        /// <param name="dfeDouble"> Any object. </param>
        /// <param name="dfeBool"> Any object. </param>
        /// <param name="dfeInt"> Any object. </param>
        /// <param name="dfeObject"> Any object. </param>
        /// <param name="dfeListOfT"> Any object. </param>
        /// <param name="dfeListOfString"> Any object. </param>
        /// <param name="dfeKeyValuePairs"> Any object. </param>
        /// <param name="dfeDateTime"> Any object. </param>
        /// <param name="dfeDuration"> Any object. </param>
        /// <param name="dfeUri"> Any object. </param>
        /// <returns> A new <see cref="Models.BaseClass"/> instance for mocking. </returns>
        public static BaseClass BaseClass(string baseClassProperty = null, DataFactoryExpression<string> dfeString = null, DataFactoryExpression<double> dfeDouble = null, DataFactoryExpression<bool> dfeBool = null, DataFactoryExpression<int> dfeInt = null, DataFactoryExpression<BinaryData> dfeObject = null, DataFactoryExpression<IList<SeparateClass>> dfeListOfT = null, DataFactoryExpression<IList<string>> dfeListOfString = null, DataFactoryExpression<IDictionary<string, string>> dfeKeyValuePairs = null, DataFactoryExpression<DateTimeOffset> dfeDateTime = null, DataFactoryExpression<TimeSpan> dfeDuration = null, DataFactoryExpression<Uri> dfeUri = null)
        {
            return new BaseClass(baseClassProperty, dfeString, dfeDouble, dfeBool, dfeInt, dfeObject, dfeListOfT, dfeListOfString, dfeKeyValuePairs, dfeDateTime, dfeDuration, dfeUri);
        }

        /// <summary> Initializes a new instance of BaseClassWithDiscriminator. </summary>
        /// <param name="baseClassProperty"></param>
        /// <param name="dfeString"> Any object. </param>
        /// <param name="dfeDouble"> Any object. </param>
        /// <param name="dfeBool"> Any object. </param>
        /// <param name="dfeInt"> Any object. </param>
        /// <param name="dfeObject"> Any object. </param>
        /// <param name="dfeListOfT"> Any object. </param>
        /// <param name="dfeListOfString"> Any object. </param>
        /// <param name="dfeKeyValuePairs"> Any object. </param>
        /// <param name="dfeDateTime"> Any object. </param>
        /// <param name="dfeDuration"> Any object. </param>
        /// <param name="dfeUri"> Any object. </param>
        /// <param name="discriminatorProperty"></param>
        /// <returns> A new <see cref="Models.BaseClassWithDiscriminator"/> instance for mocking. </returns>
        public static BaseClassWithDiscriminator BaseClassWithDiscriminator(string baseClassProperty = null, DataFactoryExpression<string> dfeString = null, DataFactoryExpression<double> dfeDouble = null, DataFactoryExpression<bool> dfeBool = null, DataFactoryExpression<int> dfeInt = null, DataFactoryExpression<BinaryData> dfeObject = null, DataFactoryExpression<IList<SeparateClass>> dfeListOfT = null, DataFactoryExpression<IList<string>> dfeListOfString = null, DataFactoryExpression<IDictionary<string, string>> dfeKeyValuePairs = null, DataFactoryExpression<DateTimeOffset> dfeDateTime = null, DataFactoryExpression<TimeSpan> dfeDuration = null, DataFactoryExpression<Uri> dfeUri = null, string discriminatorProperty = null)
        {
            return new UnknownBaseClassWithDiscriminator(baseClassProperty, dfeString, dfeDouble, dfeBool, dfeInt, dfeObject, dfeListOfT, dfeListOfString, dfeKeyValuePairs, dfeDateTime, dfeDuration, dfeUri, discriminatorProperty);
        }

        /// <summary> Initializes a new instance of SomeProperties. </summary>
        /// <param name="someProperty"></param>
        /// <param name="someOtherProperty"></param>
        /// <returns> A new <see cref="Models.SomeProperties"/> instance for mocking. </returns>
        public static SomeProperties SomeProperties(string someProperty = null, string someOtherProperty = null)
        {
            return new SomeProperties(someProperty, someOtherProperty);
        }

        /// <summary> Initializes a new instance of ClassThatInheritsFromBaseClassAndSomeProperties. </summary>
        /// <param name="baseClassProperty"></param>
        /// <param name="dfeString"> Any object. </param>
        /// <param name="dfeDouble"> Any object. </param>
        /// <param name="dfeBool"> Any object. </param>
        /// <param name="dfeInt"> Any object. </param>
        /// <param name="dfeObject"> Any object. </param>
        /// <param name="dfeListOfT"> Any object. </param>
        /// <param name="dfeListOfString"> Any object. </param>
        /// <param name="dfeKeyValuePairs"> Any object. </param>
        /// <param name="dfeDateTime"> Any object. </param>
        /// <param name="dfeDuration"> Any object. </param>
        /// <param name="dfeUri"> Any object. </param>
        /// <param name="someProperty"></param>
        /// <param name="someOtherProperty"></param>
        /// <returns> A new <see cref="Models.ClassThatInheritsFromBaseClassAndSomeProperties"/> instance for mocking. </returns>
        public static ClassThatInheritsFromBaseClassAndSomeProperties ClassThatInheritsFromBaseClassAndSomeProperties(string baseClassProperty = null, DataFactoryExpression<string> dfeString = null, DataFactoryExpression<double> dfeDouble = null, DataFactoryExpression<bool> dfeBool = null, DataFactoryExpression<int> dfeInt = null, DataFactoryExpression<BinaryData> dfeObject = null, DataFactoryExpression<IList<SeparateClass>> dfeListOfT = null, DataFactoryExpression<IList<string>> dfeListOfString = null, DataFactoryExpression<IDictionary<string, string>> dfeKeyValuePairs = null, DataFactoryExpression<DateTimeOffset> dfeDateTime = null, DataFactoryExpression<TimeSpan> dfeDuration = null, DataFactoryExpression<Uri> dfeUri = null, string someProperty = null, string someOtherProperty = null)
        {
            return new ClassThatInheritsFromBaseClassAndSomeProperties(baseClassProperty, dfeString, dfeDouble, dfeBool, dfeInt, dfeObject, dfeListOfT, dfeListOfString, dfeKeyValuePairs, dfeDateTime, dfeDuration, dfeUri, someProperty, someOtherProperty);
        }

        /// <summary> Initializes a new instance of ClassThatInheritsFromBaseClass. </summary>
        /// <param name="baseClassProperty"></param>
        /// <param name="dfeString"> Any object. </param>
        /// <param name="dfeDouble"> Any object. </param>
        /// <param name="dfeBool"> Any object. </param>
        /// <param name="dfeInt"> Any object. </param>
        /// <param name="dfeObject"> Any object. </param>
        /// <param name="dfeListOfT"> Any object. </param>
        /// <param name="dfeListOfString"> Any object. </param>
        /// <param name="dfeKeyValuePairs"> Any object. </param>
        /// <param name="dfeDateTime"> Any object. </param>
        /// <param name="dfeDuration"> Any object. </param>
        /// <param name="dfeUri"> Any object. </param>
        /// <returns> A new <see cref="Models.ClassThatInheritsFromBaseClass"/> instance for mocking. </returns>
        public static ClassThatInheritsFromBaseClass ClassThatInheritsFromBaseClass(string baseClassProperty = null, DataFactoryExpression<string> dfeString = null, DataFactoryExpression<double> dfeDouble = null, DataFactoryExpression<bool> dfeBool = null, DataFactoryExpression<int> dfeInt = null, DataFactoryExpression<BinaryData> dfeObject = null, DataFactoryExpression<IList<SeparateClass>> dfeListOfT = null, DataFactoryExpression<IList<string>> dfeListOfString = null, DataFactoryExpression<IDictionary<string, string>> dfeKeyValuePairs = null, DataFactoryExpression<DateTimeOffset> dfeDateTime = null, DataFactoryExpression<TimeSpan> dfeDuration = null, DataFactoryExpression<Uri> dfeUri = null)
        {
            return new ClassThatInheritsFromBaseClass(baseClassProperty, dfeString, dfeDouble, dfeBool, dfeInt, dfeObject, dfeListOfT, dfeListOfString, dfeKeyValuePairs, dfeDateTime, dfeDuration, dfeUri);
        }

        /// <summary> Initializes a new instance of ClassThatInheritsFromBaseClassWithDiscriminator. </summary>
        /// <param name="baseClassProperty"></param>
        /// <param name="dfeString"> Any object. </param>
        /// <param name="dfeDouble"> Any object. </param>
        /// <param name="dfeBool"> Any object. </param>
        /// <param name="dfeInt"> Any object. </param>
        /// <param name="dfeObject"> Any object. </param>
        /// <param name="dfeListOfT"> Any object. </param>
        /// <param name="dfeListOfString"> Any object. </param>
        /// <param name="dfeKeyValuePairs"> Any object. </param>
        /// <param name="dfeDateTime"> Any object. </param>
        /// <param name="dfeDuration"> Any object. </param>
        /// <param name="dfeUri"> Any object. </param>
        /// <returns> A new <see cref="Models.ClassThatInheritsFromBaseClassWithDiscriminator"/> instance for mocking. </returns>
        public static ClassThatInheritsFromBaseClassWithDiscriminator ClassThatInheritsFromBaseClassWithDiscriminator(string baseClassProperty = null, DataFactoryExpression<string> dfeString = null, DataFactoryExpression<double> dfeDouble = null, DataFactoryExpression<bool> dfeBool = null, DataFactoryExpression<int> dfeInt = null, DataFactoryExpression<BinaryData> dfeObject = null, DataFactoryExpression<IList<SeparateClass>> dfeListOfT = null, DataFactoryExpression<IList<string>> dfeListOfString = null, DataFactoryExpression<IDictionary<string, string>> dfeKeyValuePairs = null, DataFactoryExpression<DateTimeOffset> dfeDateTime = null, DataFactoryExpression<TimeSpan> dfeDuration = null, DataFactoryExpression<Uri> dfeUri = null)
        {
            return new ClassThatInheritsFromBaseClassWithDiscriminator(baseClassProperty, dfeString, dfeDouble, dfeBool, dfeInt, dfeObject, dfeListOfT, dfeListOfString, dfeKeyValuePairs, dfeDateTime, dfeDuration, dfeUri, "ClassThatInheritsFromBaseClassWithDiscriminator");
        }

        /// <summary> Initializes a new instance of ClassThatInheritsFromBaseClassWithDiscriminatorAndSomeProperties. </summary>
        /// <param name="baseClassProperty"></param>
        /// <param name="dfeString"> Any object. </param>
        /// <param name="dfeDouble"> Any object. </param>
        /// <param name="dfeBool"> Any object. </param>
        /// <param name="dfeInt"> Any object. </param>
        /// <param name="dfeObject"> Any object. </param>
        /// <param name="dfeListOfT"> Any object. </param>
        /// <param name="dfeListOfString"> Any object. </param>
        /// <param name="dfeKeyValuePairs"> Any object. </param>
        /// <param name="dfeDateTime"> Any object. </param>
        /// <param name="dfeDuration"> Any object. </param>
        /// <param name="dfeUri"> Any object. </param>
        /// <param name="someProperty"></param>
        /// <param name="someOtherProperty"></param>
        /// <returns> A new <see cref="Models.ClassThatInheritsFromBaseClassWithDiscriminatorAndSomeProperties"/> instance for mocking. </returns>
        public static ClassThatInheritsFromBaseClassWithDiscriminatorAndSomeProperties ClassThatInheritsFromBaseClassWithDiscriminatorAndSomeProperties(string baseClassProperty = null, DataFactoryExpression<string> dfeString = null, DataFactoryExpression<double> dfeDouble = null, DataFactoryExpression<bool> dfeBool = null, DataFactoryExpression<int> dfeInt = null, DataFactoryExpression<BinaryData> dfeObject = null, DataFactoryExpression<IList<SeparateClass>> dfeListOfT = null, DataFactoryExpression<IList<string>> dfeListOfString = null, DataFactoryExpression<IDictionary<string, string>> dfeKeyValuePairs = null, DataFactoryExpression<DateTimeOffset> dfeDateTime = null, DataFactoryExpression<TimeSpan> dfeDuration = null, DataFactoryExpression<Uri> dfeUri = null, string someProperty = null, string someOtherProperty = null)
        {
            return new ClassThatInheritsFromBaseClassWithDiscriminatorAndSomeProperties(baseClassProperty, dfeString, dfeDouble, dfeBool, dfeInt, dfeObject, dfeListOfT, dfeListOfString, dfeKeyValuePairs, dfeDateTime, dfeDuration, dfeUri, "ClassThatInheritsFromBaseClassWithDiscriminatorAndSomeProperties", someProperty, someOtherProperty);
        }

        /// <summary> Initializes a new instance of ClassThatInheritsFromBaseClassAndRedefinesAProperty. </summary>
        /// <param name="baseClassProperty"></param>
        /// <param name="dfeString"> Any object. </param>
        /// <param name="dfeDouble"> Any object. </param>
        /// <param name="dfeBool"> Any object. </param>
        /// <param name="dfeInt"> Any object. </param>
        /// <param name="dfeObject"> Any object. </param>
        /// <param name="dfeListOfT"> Any object. </param>
        /// <param name="dfeListOfString"> Any object. </param>
        /// <param name="dfeKeyValuePairs"> Any object. </param>
        /// <param name="dfeDateTime"> Any object. </param>
        /// <param name="dfeDuration"> Any object. </param>
        /// <param name="dfeUri"> Any object. </param>
        /// <returns> A new <see cref="Models.ClassThatInheritsFromBaseClassAndRedefinesAProperty"/> instance for mocking. </returns>
        public static ClassThatInheritsFromBaseClassAndRedefinesAProperty ClassThatInheritsFromBaseClassAndRedefinesAProperty(string baseClassProperty = null, DataFactoryExpression<string> dfeString = null, DataFactoryExpression<double> dfeDouble = null, DataFactoryExpression<bool> dfeBool = null, DataFactoryExpression<int> dfeInt = null, DataFactoryExpression<BinaryData> dfeObject = null, DataFactoryExpression<IList<SeparateClass>> dfeListOfT = null, DataFactoryExpression<IList<string>> dfeListOfString = null, DataFactoryExpression<IDictionary<string, string>> dfeKeyValuePairs = null, DataFactoryExpression<DateTimeOffset> dfeDateTime = null, DataFactoryExpression<TimeSpan> dfeDuration = null, DataFactoryExpression<Uri> dfeUri = null)
        {
            return new ClassThatInheritsFromBaseClassAndRedefinesAProperty(baseClassProperty, dfeString, dfeDouble, dfeBool, dfeInt, dfeObject, dfeListOfT, dfeListOfString, dfeKeyValuePairs, dfeDateTime, dfeDuration, dfeUri);
        }

        /// <summary> Initializes a new instance of ClassThatInheritsFromSomePropertiesAndBaseClass. </summary>
        /// <param name="someProperty"></param>
        /// <param name="someOtherProperty"></param>
        /// <param name="baseClassProperty"></param>
        /// <param name="dfeString"> Any object. </param>
        /// <param name="dfeDouble"> Any object. </param>
        /// <param name="dfeBool"> Any object. </param>
        /// <param name="dfeInt"> Any object. </param>
        /// <param name="dfeObject"> Any object. </param>
        /// <param name="dfeListOfT"> Any object. </param>
        /// <param name="dfeListOfString"> Any object. </param>
        /// <param name="dfeKeyValuePairs"> Any object. </param>
        /// <param name="dfeDateTime"> Any object. </param>
        /// <param name="dfeDuration"> Any object. </param>
        /// <param name="dfeUri"> Any object. </param>
        /// <returns> A new <see cref="Models.ClassThatInheritsFromSomePropertiesAndBaseClass"/> instance for mocking. </returns>
        public static ClassThatInheritsFromSomePropertiesAndBaseClass ClassThatInheritsFromSomePropertiesAndBaseClass(string someProperty = null, string someOtherProperty = null, string baseClassProperty = null, DataFactoryExpression<string> dfeString = null, DataFactoryExpression<double> dfeDouble = null, DataFactoryExpression<bool> dfeBool = null, DataFactoryExpression<int> dfeInt = null, DataFactoryExpression<BinaryData> dfeObject = null, DataFactoryExpression<IList<SeparateClass>> dfeListOfT = null, DataFactoryExpression<IList<string>> dfeListOfString = null, DataFactoryExpression<IDictionary<string, string>> dfeKeyValuePairs = null, DataFactoryExpression<DateTimeOffset> dfeDateTime = null, DataFactoryExpression<TimeSpan> dfeDuration = null, DataFactoryExpression<Uri> dfeUri = null)
        {
            return new ClassThatInheritsFromSomePropertiesAndBaseClass(someProperty, someOtherProperty, baseClassProperty, dfeString, dfeDouble, dfeBool, dfeInt, dfeObject, dfeListOfT, dfeListOfString, dfeKeyValuePairs, dfeDateTime, dfeDuration, dfeUri);
        }

        /// <summary> Initializes a new instance of ClassThatInheritsFromSomePropertiesAndBaseClassAndRedefinesAProperty. </summary>
        /// <param name="someProperty"></param>
        /// <param name="someOtherProperty"></param>
        /// <param name="baseClassProperty"></param>
        /// <param name="dfeString"> Any object. </param>
        /// <param name="dfeDouble"> Any object. </param>
        /// <param name="dfeBool"> Any object. </param>
        /// <param name="dfeInt"> Any object. </param>
        /// <param name="dfeObject"> Any object. </param>
        /// <param name="dfeListOfT"> Any object. </param>
        /// <param name="dfeListOfString"> Any object. </param>
        /// <param name="dfeKeyValuePairs"> Any object. </param>
        /// <param name="dfeDateTime"> Any object. </param>
        /// <param name="dfeDuration"> Any object. </param>
        /// <param name="dfeUri"> Any object. </param>
        /// <returns> A new <see cref="Models.ClassThatInheritsFromSomePropertiesAndBaseClassAndRedefinesAProperty"/> instance for mocking. </returns>
        public static ClassThatInheritsFromSomePropertiesAndBaseClassAndRedefinesAProperty ClassThatInheritsFromSomePropertiesAndBaseClassAndRedefinesAProperty(string someProperty = null, string someOtherProperty = null, string baseClassProperty = null, DataFactoryExpression<string> dfeString = null, DataFactoryExpression<double> dfeDouble = null, DataFactoryExpression<bool> dfeBool = null, DataFactoryExpression<int> dfeInt = null, DataFactoryExpression<BinaryData> dfeObject = null, DataFactoryExpression<IList<SeparateClass>> dfeListOfT = null, DataFactoryExpression<IList<string>> dfeListOfString = null, DataFactoryExpression<IDictionary<string, string>> dfeKeyValuePairs = null, DataFactoryExpression<DateTimeOffset> dfeDateTime = null, DataFactoryExpression<TimeSpan> dfeDuration = null, DataFactoryExpression<Uri> dfeUri = null)
        {
            return new ClassThatInheritsFromSomePropertiesAndBaseClassAndRedefinesAProperty(someProperty, someOtherProperty, baseClassProperty, dfeString, dfeDouble, dfeBool, dfeInt, dfeObject, dfeListOfT, dfeListOfString, dfeKeyValuePairs, dfeDateTime, dfeDuration, dfeUri);
        }

        /// <summary> Initializes a new instance of BaseClassWithExtensibleEnumDiscriminator. </summary>
        /// <param name="discriminatorProperty"></param>
        /// <returns> A new <see cref="Models.BaseClassWithExtensibleEnumDiscriminator"/> instance for mocking. </returns>
        public static BaseClassWithExtensibleEnumDiscriminator BaseClassWithExtensibleEnumDiscriminator(string discriminatorProperty = null)
        {
            return new UnknownBaseClassWithExtensibleEnumDiscriminator(discriminatorProperty);
        }

        /// <summary> Initializes a new instance of DerivedClassWithExtensibleEnumDiscriminator. </summary>
        /// <returns> A new <see cref="Models.DerivedClassWithExtensibleEnumDiscriminator"/> instance for mocking. </returns>
        public static DerivedClassWithExtensibleEnumDiscriminator DerivedClassWithExtensibleEnumDiscriminator()
        {
            return new DerivedClassWithExtensibleEnumDiscriminator("derived");
        }

        /// <summary> Initializes a new instance of AnotherDerivedClassWithExtensibleEnumDiscriminator. </summary>
        /// <returns> A new <see cref="Models.AnotherDerivedClassWithExtensibleEnumDiscriminator"/> instance for mocking. </returns>
        public static AnotherDerivedClassWithExtensibleEnumDiscriminator AnotherDerivedClassWithExtensibleEnumDiscriminator()
        {
            return new AnotherDerivedClassWithExtensibleEnumDiscriminator("random value");
        }

        /// <summary> Initializes a new instance of SeparateClass. </summary>
        /// <param name="stringProperty"></param>
        /// <param name="modelProperty">
        /// Please note <see cref="BaseClassWithExtensibleEnumDiscriminator"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="DerivedClassWithExtensibleEnumDiscriminator"/> and <see cref="AnotherDerivedClassWithExtensibleEnumDiscriminator"/>.
        /// </param>
        /// <returns> A new <see cref="Models.SeparateClass"/> instance for mocking. </returns>
        public static SeparateClass SeparateClass(string stringProperty = null, BaseClassWithExtensibleEnumDiscriminator modelProperty = null)
        {
            return new SeparateClass(stringProperty, modelProperty);
        }
    }
}
