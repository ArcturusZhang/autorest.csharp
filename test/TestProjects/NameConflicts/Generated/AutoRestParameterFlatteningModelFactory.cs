// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

namespace NameConflicts.Models
{
    /// <summary> Model factory for read-only models. </summary>
    public static partial class AutoRestParameterFlatteningModelFactory
    {
        /// <summary> Initializes a new instance of Class. </summary>
        /// <param name="abstract"></param>
        /// <param name="add"></param>
        /// <param name="alias"></param>
        /// <param name="as"></param>
        /// <param name="ascending"></param>
        /// <param name="async"></param>
        /// <param name="await"></param>
        /// <param name="base"></param>
        /// <param name="bool"></param>
        /// <param name="break"></param>
        /// <param name="by"></param>
        /// <param name="byte"></param>
        /// <param name="catch"></param>
        /// <param name="char"></param>
        /// <param name="checked"></param>
        /// <param name="const"></param>
        /// <param name="continue"></param>
        /// <param name="classValue"></param>
        /// <param name="decimal"></param>
        /// <param name="default"></param>
        /// <param name="delegate"></param>
        /// <param name="descending"></param>
        /// <param name="do"></param>
        /// <param name="double"></param>
        /// <param name="dynamic"></param>
        /// <param name="else"></param>
        /// <param name="enum"></param>
        /// <param name="event"></param>
        /// <param name="explicit"></param>
        /// <param name="extern"></param>
        /// <param name="false"></param>
        /// <param name="finally"></param>
        /// <param name="fixed"></param>
        /// <param name="float"></param>
        /// <param name="for"></param>
        /// <param name="foreach"></param>
        /// <param name="from"></param>
        /// <param name="get"></param>
        /// <param name="global"></param>
        /// <param name="goto"></param>
        /// <param name="group"></param>
        /// <param name="if"></param>
        /// <param name="implicit"></param>
        /// <param name="in"></param>
        /// <param name="int"></param>
        /// <param name="interface"></param>
        /// <param name="internal"></param>
        /// <param name="into"></param>
        /// <param name="is"></param>
        /// <param name="join"></param>
        /// <param name="let"></param>
        /// <param name="lock"></param>
        /// <param name="long"></param>
        /// <param name="nameof"></param>
        /// <param name="namespace"></param>
        /// <param name="new"></param>
        /// <param name="nullProperty"></param>
        /// <param name="object"></param>
        /// <param name="on"></param>
        /// <param name="operator"></param>
        /// <param name="orderby"></param>
        /// <param name="out"></param>
        /// <param name="override"></param>
        /// <param name="params"></param>
        /// <param name="partial"></param>
        /// <param name="private"></param>
        /// <param name="protected"></param>
        /// <param name="public"></param>
        /// <param name="readonly"></param>
        /// <param name="ref"></param>
        /// <param name="remove"></param>
        /// <param name="return"></param>
        /// <param name="sbyte"></param>
        /// <param name="sealed"></param>
        /// <param name="select"></param>
        /// <param name="set"></param>
        /// <param name="short"></param>
        /// <param name="sizeof"></param>
        /// <param name="stackalloc"></param>
        /// <param name="static"></param>
        /// <param name="string"></param>
        /// <param name="struct"></param>
        /// <param name="switch"></param>
        /// <param name="this"></param>
        /// <param name="throw"></param>
        /// <param name="true"></param>
        /// <param name="try"></param>
        /// <param name="typeof"></param>
        /// <param name="uint"></param>
        /// <param name="ulong"></param>
        /// <param name="unchecked"></param>
        /// <param name="unmanaged"></param>
        /// <param name="unsafe"></param>
        /// <param name="ushort"></param>
        /// <param name="using"></param>
        /// <param name="value"></param>
        /// <param name="var"></param>
        /// <param name="virtual"></param>
        /// <param name="void"></param>
        /// <param name="volatile"></param>
        /// <param name="when"></param>
        /// <param name="where"></param>
        /// <param name="while"></param>
        /// <param name="yield"></param>
        /// <param name="system"></param>
        /// <param name="toStringValue"></param>
        /// <param name="equalsValue"></param>
        /// <param name="getHashCodeValue"></param>
        /// <returns> A new <see cref="Models.Class"/> instance for mocking. </returns>
        public static Class Class(string @abstract = null, string @add = null, string @alias = null, string @as = null, string @ascending = null, string @async = null, string @await = null, string @base = null, string @bool = null, string @break = null, string @by = null, string @byte = null, string @catch = null, string @char = null, string @checked = null, string @const = null, string @continue = null, string classValue = null, string @decimal = null, string @default = null, string @delegate = null, string @descending = null, string @do = null, string @double = null, string @dynamic = null, string @else = null, string @enum = null, string @event = null, string @explicit = null, string @extern = null, string @false = null, string @finally = null, string @fixed = null, string @float = null, string @for = null, string @foreach = null, string @from = null, string @get = null, string @global = null, string @goto = null, string group = null, string @if = null, string @implicit = null, string @in = null, string @int = null, string @interface = null, string @internal = null, string @into = null, string @is = null, string @join = null, string @let = null, string @lock = null, string @long = null, string @nameof = null, string @namespace = null, string @new = null, string nullProperty = null, string @object = null, string @on = null, string @operator = null, string orderby = null, string @out = null, string @override = null, string @params = null, string @partial = null, string @private = null, string @protected = null, string @public = null, string @readonly = null, string @ref = null, string @remove = null, string @return = null, string @sbyte = null, string @sealed = null, string select = null, string @set = null, string @short = null, string @sizeof = null, string @stackalloc = null, string @static = null, string @string = null, string @struct = null, string @switch = null, string @this = null, string @throw = null, string @true = null, string @try = null, string @typeof = null, string @uint = null, string @ulong = null, string @unchecked = null, string @unmanaged = null, string @unsafe = null, string @ushort = null, string @using = null, string value = null, string @var = null, string @virtual = null, string @void = null, string @volatile = null, string @when = null, string @where = null, string @while = null, string @yield = null, SystemEnum? system = null, string toStringValue = null, string equalsValue = null, string getHashCodeValue = null)
        {
            return new Class(@abstract, @add, @alias, @as, @ascending, @async, @await, @base, @bool, @break, @by, @byte, @catch, @char, @checked, @const, @continue, classValue, @decimal, @default, @delegate, @descending, @do, @double, @dynamic, @else, @enum, @event, @explicit, @extern, @false, @finally, @fixed, @float, @for, @foreach, @from, @get, @global, @goto, group, @if, @implicit, @in, @int, @interface, @internal, @into, @is, @join, @let, @lock, @long, @nameof, @namespace, @new, nullProperty, @object, @on, @operator, orderby, @out, @override, @params, @partial, @private, @protected, @public, @readonly, @ref, @remove, @return, @sbyte, @sealed, select, @set, @short, @sizeof, @stackalloc, @static, @string, @struct, @switch, @this, @throw, @true, @try, @typeof, @uint, @ulong, @unchecked, @unmanaged, @unsafe, @ushort, @using, value, @var, @virtual, @void, @volatile, @when, @where, @while, @yield, system, toStringValue, equalsValue, getHashCodeValue);
        }

        /// <summary> Initializes a new instance of Struct. </summary>
        /// <param name="abstract"></param>
        /// <param name="add"></param>
        /// <param name="alias"></param>
        /// <param name="as"></param>
        /// <param name="ascending"></param>
        /// <param name="async"></param>
        /// <param name="await"></param>
        /// <param name="base"></param>
        /// <param name="bool"></param>
        /// <param name="break"></param>
        /// <param name="by"></param>
        /// <param name="byte"></param>
        /// <param name="catch"></param>
        /// <param name="char"></param>
        /// <param name="checked"></param>
        /// <param name="const"></param>
        /// <param name="continue"></param>
        /// <param name="classValue"></param>
        /// <param name="decimal"></param>
        /// <param name="default"></param>
        /// <param name="delegate"></param>
        /// <param name="descending"></param>
        /// <param name="do"></param>
        /// <param name="double"></param>
        /// <param name="dynamic"></param>
        /// <param name="else"></param>
        /// <param name="enum"></param>
        /// <param name="event"></param>
        /// <param name="explicit"></param>
        /// <param name="extern"></param>
        /// <param name="false"></param>
        /// <param name="finally"></param>
        /// <param name="fixed"></param>
        /// <param name="float"></param>
        /// <param name="for"></param>
        /// <param name="foreach"></param>
        /// <param name="from"></param>
        /// <param name="get"></param>
        /// <param name="global"></param>
        /// <param name="goto"></param>
        /// <param name="group"></param>
        /// <param name="if"></param>
        /// <param name="implicit"></param>
        /// <param name="in"></param>
        /// <param name="int"></param>
        /// <param name="interface"></param>
        /// <param name="internal"></param>
        /// <param name="into"></param>
        /// <param name="is"></param>
        /// <param name="join"></param>
        /// <param name="let"></param>
        /// <param name="lock"></param>
        /// <param name="long"></param>
        /// <param name="nameof"></param>
        /// <param name="namespace"></param>
        /// <param name="new"></param>
        /// <param name="nullProperty"></param>
        /// <param name="object"></param>
        /// <param name="on"></param>
        /// <param name="operator"></param>
        /// <param name="orderby"></param>
        /// <param name="out"></param>
        /// <param name="override"></param>
        /// <param name="params"></param>
        /// <param name="partial"></param>
        /// <param name="private"></param>
        /// <param name="protected"></param>
        /// <param name="public"></param>
        /// <param name="readonly"></param>
        /// <param name="ref"></param>
        /// <param name="remove"></param>
        /// <param name="return"></param>
        /// <param name="sbyte"></param>
        /// <param name="sealed"></param>
        /// <param name="select"></param>
        /// <param name="set"></param>
        /// <param name="short"></param>
        /// <param name="sizeof"></param>
        /// <param name="stackalloc"></param>
        /// <param name="static"></param>
        /// <param name="string"></param>
        /// <param name="struct"></param>
        /// <param name="switch"></param>
        /// <param name="this"></param>
        /// <param name="throw"></param>
        /// <param name="true"></param>
        /// <param name="try"></param>
        /// <param name="typeof"></param>
        /// <param name="uint"></param>
        /// <param name="ulong"></param>
        /// <param name="unchecked"></param>
        /// <param name="unmanaged"></param>
        /// <param name="unsafe"></param>
        /// <param name="ushort"></param>
        /// <param name="using"></param>
        /// <param name="value"></param>
        /// <param name="var"></param>
        /// <param name="virtual"></param>
        /// <param name="void"></param>
        /// <param name="volatile"></param>
        /// <param name="when"></param>
        /// <param name="where"></param>
        /// <param name="while"></param>
        /// <param name="yield"></param>
        /// <param name="system"></param>
        /// <param name="toStringValue"></param>
        /// <param name="equalsValue"></param>
        /// <param name="getHashCodeValue"></param>
        /// <param name="one"></param>
        /// <returns> A new <see cref="Models.Struct"/> instance for mocking. </returns>
        public static Struct Struct(string @abstract = null, string @add = null, string @alias = null, string @as = null, string @ascending = null, string @async = null, string @await = null, string @base = null, string @bool = null, string @break = null, string @by = null, string @byte = null, string @catch = null, string @char = null, string @checked = null, string @const = null, string @continue = null, string classValue = null, string @decimal = null, string @default = null, string @delegate = null, string @descending = null, string @do = null, string @double = null, string @dynamic = null, string @else = null, string @enum = null, string @event = null, string @explicit = null, string @extern = null, string @false = null, string @finally = null, string @fixed = null, string @float = null, string @for = null, string @foreach = null, string @from = null, string @get = null, string @global = null, string @goto = null, string group = null, string @if = null, string @implicit = null, string @in = null, string @int = null, string @interface = null, string @internal = null, string @into = null, string @is = null, string @join = null, string @let = null, string @lock = null, string @long = null, string @nameof = null, string @namespace = null, string @new = null, string nullProperty = null, string @object = null, string @on = null, string @operator = null, string orderby = null, string @out = null, string @override = null, string @params = null, string @partial = null, string @private = null, string @protected = null, string @public = null, string @readonly = null, string @ref = null, string @remove = null, string @return = null, string @sbyte = null, string @sealed = null, string select = null, string @set = null, string @short = null, string @sizeof = null, string @stackalloc = null, string @static = null, string @string = null, string @struct = null, string @switch = null, string @this = null, string @throw = null, string @true = null, string @try = null, string @typeof = null, string @uint = null, string @ulong = null, string @unchecked = null, string @unmanaged = null, string @unsafe = null, string @ushort = null, string @using = null, string value = null, string @var = null, string @virtual = null, string @void = null, string @volatile = null, string @when = null, string @where = null, string @while = null, string @yield = null, SystemEnum? system = null, string toStringValue = null, string equalsValue = null, string getHashCodeValue = null, string one = null)
        {
            return new Struct(@abstract, @add, @alias, @as, @ascending, @async, @await, @base, @bool, @break, @by, @byte, @catch, @char, @checked, @const, @continue, classValue, @decimal, @default, @delegate, @descending, @do, @double, @dynamic, @else, @enum, @event, @explicit, @extern, @false, @finally, @fixed, @float, @for, @foreach, @from, @get, @global, @goto, group, @if, @implicit, @in, @int, @interface, @internal, @into, @is, @join, @let, @lock, @long, @nameof, @namespace, @new, nullProperty, @object, @on, @operator, orderby, @out, @override, @params, @partial, @private, @protected, @public, @readonly, @ref, @remove, @return, @sbyte, @sealed, select, @set, @short, @sizeof, @stackalloc, @static, @string, @struct, @switch, @this, @throw, @true, @try, @typeof, @uint, @ulong, @unchecked, @unmanaged, @unsafe, @ushort, @using, value, @var, @virtual, @void, @volatile, @when, @where, @while, @yield, system, toStringValue, equalsValue, getHashCodeValue, one);
        }

        /// <summary> Initializes a new instance of HttpMessage. </summary>
        /// <param name="property"></param>
        /// <returns> A new <see cref="Models.HttpMessage"/> instance for mocking. </returns>
        public static HttpMessage HttpMessage(string property = null)
        {
            return new HttpMessage(property);
        }

        /// <summary> Initializes a new instance of Request. </summary>
        /// <param name="property"></param>
        /// <returns> A new <see cref="Models.Request"/> instance for mocking. </returns>
        public static Request Request(string property = null)
        {
            return new Request(property);
        }

        /// <summary> Initializes a new instance of Response. </summary>
        /// <param name="property"></param>
        /// <returns> A new <see cref="Models.Response"/> instance for mocking. </returns>
        public static Response Response(string property = null)
        {
            return new Response(property);
        }
    }
}
