// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Threading.Tasks;
using System.Xml;
using Azure;
using Azure.Core;
using Azure.Identity;
using CustomizationsInTsp;
using NUnit.Framework;

namespace CustomizationsInTsp.Samples
{
    public class Samples_CustomizationsInTspClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RoundTrip()
        {
            CustomizationsInTspClient client = new CustomizationsInTspClient();

            RequestContent content = RequestContent.Create(new Dictionary<string, object>()
            {
                ["propertyModelToMakeInternal"] = new Dictionary<string, object>()
                {
                    ["requiredInt"] = 1234,
                },
                ["propertyModelToRename"] = new Dictionary<string, object>()
                {
                    ["requiredInt"] = 1234,
                    ["optionalInt"] = 1234,
                },
                ["propertyModelToChangeNamespace"] = new Dictionary<string, object>()
                {
                    ["requiredInt"] = 1234,
                },
                ["propertyModelWithCustomizedProperties"] = new Dictionary<string, object>()
                {
                    ["propertyToMakeInternal"] = 1234,
                    ["propertyToRename"] = 1234,
                    ["propertyToMakeFloat"] = 1234,
                    ["propertyToMakeInt"] = 123.45F,
                    ["propertyToMakeDuration"] = "<propertyToMakeDuration>",
                    ["propertyToMakeString"] = XmlConvert.ToTimeSpan("PT1H23M45S"),
                    ["propertyToMakeJsonElement"] = "<propertyToMakeJsonElement>",
                    ["propertyToField"] = "<propertyToField>",
                    ["badListName"] = new object[]
            {
"<badListName>"
            },
                    ["badDictionaryName"] = new Dictionary<string, object>()
                    {
                        ["key"] = "<badDictionaryName>",
                    },
                    ["badListOfListName"] = new object[]
            {
null
            },
                    ["badListOfDictionaryName"] = new object[]
            {
null
            },
                },
                ["propertyEnumToRename"] = "1",
                ["propertyEnumWithValueToRename"] = "1",
                ["propertyEnumToBeMadeExtensible"] = "1",
                ["propertyModelToAddAdditionalSerializableProperty"] = new Dictionary<string, object>()
                {
                    ["requiredInt"] = 1234,
                },
                ["propertyToMoveToCustomization"] = "a",
            });
            Response response = client.RoundTrip(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RoundTrip_Async()
        {
            CustomizationsInTspClient client = new CustomizationsInTspClient();

            RequestContent content = RequestContent.Create(new Dictionary<string, object>()
            {
                ["propertyModelToMakeInternal"] = new Dictionary<string, object>()
                {
                    ["requiredInt"] = 1234,
                },
                ["propertyModelToRename"] = new Dictionary<string, object>()
                {
                    ["requiredInt"] = 1234,
                    ["optionalInt"] = 1234,
                },
                ["propertyModelToChangeNamespace"] = new Dictionary<string, object>()
                {
                    ["requiredInt"] = 1234,
                },
                ["propertyModelWithCustomizedProperties"] = new Dictionary<string, object>()
                {
                    ["propertyToMakeInternal"] = 1234,
                    ["propertyToRename"] = 1234,
                    ["propertyToMakeFloat"] = 1234,
                    ["propertyToMakeInt"] = 123.45F,
                    ["propertyToMakeDuration"] = "<propertyToMakeDuration>",
                    ["propertyToMakeString"] = XmlConvert.ToTimeSpan("PT1H23M45S"),
                    ["propertyToMakeJsonElement"] = "<propertyToMakeJsonElement>",
                    ["propertyToField"] = "<propertyToField>",
                    ["badListName"] = new object[]
            {
"<badListName>"
            },
                    ["badDictionaryName"] = new Dictionary<string, object>()
                    {
                        ["key"] = "<badDictionaryName>",
                    },
                    ["badListOfListName"] = new object[]
            {
null
            },
                    ["badListOfDictionaryName"] = new object[]
            {
null
            },
                },
                ["propertyEnumToRename"] = "1",
                ["propertyEnumWithValueToRename"] = "1",
                ["propertyEnumToBeMadeExtensible"] = "1",
                ["propertyModelToAddAdditionalSerializableProperty"] = new Dictionary<string, object>()
                {
                    ["requiredInt"] = 1234,
                },
                ["propertyToMoveToCustomization"] = "a",
            });
            Response response = await client.RoundTripAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RoundTrip_AllParameters()
        {
            CustomizationsInTspClient client = new CustomizationsInTspClient();

            RequestContent content = RequestContent.Create(new Dictionary<string, object>()
            {
                ["propertyModelToMakeInternal"] = new Dictionary<string, object>()
                {
                    ["requiredInt"] = 1234,
                },
                ["propertyModelToRename"] = new Dictionary<string, object>()
                {
                    ["requiredInt"] = 1234,
                    ["optionalInt"] = 1234,
                },
                ["propertyModelToChangeNamespace"] = new Dictionary<string, object>()
                {
                    ["requiredInt"] = 1234,
                },
                ["propertyModelWithCustomizedProperties"] = new Dictionary<string, object>()
                {
                    ["propertyToMakeInternal"] = 1234,
                    ["propertyToRename"] = 1234,
                    ["propertyToMakeFloat"] = 1234,
                    ["propertyToMakeInt"] = 123.45F,
                    ["propertyToMakeDuration"] = "<propertyToMakeDuration>",
                    ["propertyToMakeString"] = XmlConvert.ToTimeSpan("PT1H23M45S"),
                    ["propertyToMakeJsonElement"] = "<propertyToMakeJsonElement>",
                    ["propertyToField"] = "<propertyToField>",
                    ["badListName"] = new object[]
            {
"<badListName>"
            },
                    ["badDictionaryName"] = new Dictionary<string, object>()
                    {
                        ["key"] = "<badDictionaryName>",
                    },
                    ["badListOfListName"] = new object[]
            {
null
            },
                    ["badListOfDictionaryName"] = new object[]
            {
null
            },
                },
                ["propertyEnumToRename"] = "1",
                ["propertyEnumWithValueToRename"] = "1",
                ["propertyEnumToBeMadeExtensible"] = "1",
                ["propertyModelToAddAdditionalSerializableProperty"] = new Dictionary<string, object>()
                {
                    ["requiredInt"] = 1234,
                },
                ["propertyToMoveToCustomization"] = "a",
            });
            Response response = client.RoundTrip(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("propertyModelToMakeInternal").GetProperty("requiredInt").ToString());
            Console.WriteLine(result.GetProperty("propertyModelToRename").GetProperty("requiredInt").ToString());
            Console.WriteLine(result.GetProperty("propertyModelToRename").GetProperty("optionalInt").ToString());
            Console.WriteLine(result.GetProperty("propertyModelToChangeNamespace").GetProperty("requiredInt").ToString());
            Console.WriteLine(result.GetProperty("propertyModelWithCustomizedProperties").GetProperty("propertyToMakeInternal").ToString());
            Console.WriteLine(result.GetProperty("propertyModelWithCustomizedProperties").GetProperty("propertyToRename").ToString());
            Console.WriteLine(result.GetProperty("propertyModelWithCustomizedProperties").GetProperty("propertyToMakeFloat").ToString());
            Console.WriteLine(result.GetProperty("propertyModelWithCustomizedProperties").GetProperty("propertyToMakeInt").ToString());
            Console.WriteLine(result.GetProperty("propertyModelWithCustomizedProperties").GetProperty("propertyToMakeDuration").ToString());
            Console.WriteLine(result.GetProperty("propertyModelWithCustomizedProperties").GetProperty("propertyToMakeString").ToString());
            Console.WriteLine(result.GetProperty("propertyModelWithCustomizedProperties").GetProperty("propertyToMakeJsonElement").ToString());
            Console.WriteLine(result.GetProperty("propertyModelWithCustomizedProperties").GetProperty("propertyToField").ToString());
            Console.WriteLine(result.GetProperty("propertyModelWithCustomizedProperties").GetProperty("badListName")[0].ToString());
            Console.WriteLine(result.GetProperty("propertyModelWithCustomizedProperties").GetProperty("badDictionaryName").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("propertyModelWithCustomizedProperties").GetProperty("badListOfListName")[0][0].ToString());
            Console.WriteLine(result.GetProperty("propertyModelWithCustomizedProperties").GetProperty("badListOfDictionaryName")[0].GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("propertyEnumToRename").ToString());
            Console.WriteLine(result.GetProperty("propertyEnumWithValueToRename").ToString());
            Console.WriteLine(result.GetProperty("propertyEnumToBeMadeExtensible").ToString());
            Console.WriteLine(result.GetProperty("propertyModelToAddAdditionalSerializableProperty").GetProperty("requiredInt").ToString());
            Console.WriteLine(result.GetProperty("propertyToMoveToCustomization").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RoundTrip_AllParameters_Async()
        {
            CustomizationsInTspClient client = new CustomizationsInTspClient();

            RequestContent content = RequestContent.Create(new Dictionary<string, object>()
            {
                ["propertyModelToMakeInternal"] = new Dictionary<string, object>()
                {
                    ["requiredInt"] = 1234,
                },
                ["propertyModelToRename"] = new Dictionary<string, object>()
                {
                    ["requiredInt"] = 1234,
                    ["optionalInt"] = 1234,
                },
                ["propertyModelToChangeNamespace"] = new Dictionary<string, object>()
                {
                    ["requiredInt"] = 1234,
                },
                ["propertyModelWithCustomizedProperties"] = new Dictionary<string, object>()
                {
                    ["propertyToMakeInternal"] = 1234,
                    ["propertyToRename"] = 1234,
                    ["propertyToMakeFloat"] = 1234,
                    ["propertyToMakeInt"] = 123.45F,
                    ["propertyToMakeDuration"] = "<propertyToMakeDuration>",
                    ["propertyToMakeString"] = XmlConvert.ToTimeSpan("PT1H23M45S"),
                    ["propertyToMakeJsonElement"] = "<propertyToMakeJsonElement>",
                    ["propertyToField"] = "<propertyToField>",
                    ["badListName"] = new object[]
            {
"<badListName>"
            },
                    ["badDictionaryName"] = new Dictionary<string, object>()
                    {
                        ["key"] = "<badDictionaryName>",
                    },
                    ["badListOfListName"] = new object[]
            {
null
            },
                    ["badListOfDictionaryName"] = new object[]
            {
null
            },
                },
                ["propertyEnumToRename"] = "1",
                ["propertyEnumWithValueToRename"] = "1",
                ["propertyEnumToBeMadeExtensible"] = "1",
                ["propertyModelToAddAdditionalSerializableProperty"] = new Dictionary<string, object>()
                {
                    ["requiredInt"] = 1234,
                },
                ["propertyToMoveToCustomization"] = "a",
            });
            Response response = await client.RoundTripAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("propertyModelToMakeInternal").GetProperty("requiredInt").ToString());
            Console.WriteLine(result.GetProperty("propertyModelToRename").GetProperty("requiredInt").ToString());
            Console.WriteLine(result.GetProperty("propertyModelToRename").GetProperty("optionalInt").ToString());
            Console.WriteLine(result.GetProperty("propertyModelToChangeNamespace").GetProperty("requiredInt").ToString());
            Console.WriteLine(result.GetProperty("propertyModelWithCustomizedProperties").GetProperty("propertyToMakeInternal").ToString());
            Console.WriteLine(result.GetProperty("propertyModelWithCustomizedProperties").GetProperty("propertyToRename").ToString());
            Console.WriteLine(result.GetProperty("propertyModelWithCustomizedProperties").GetProperty("propertyToMakeFloat").ToString());
            Console.WriteLine(result.GetProperty("propertyModelWithCustomizedProperties").GetProperty("propertyToMakeInt").ToString());
            Console.WriteLine(result.GetProperty("propertyModelWithCustomizedProperties").GetProperty("propertyToMakeDuration").ToString());
            Console.WriteLine(result.GetProperty("propertyModelWithCustomizedProperties").GetProperty("propertyToMakeString").ToString());
            Console.WriteLine(result.GetProperty("propertyModelWithCustomizedProperties").GetProperty("propertyToMakeJsonElement").ToString());
            Console.WriteLine(result.GetProperty("propertyModelWithCustomizedProperties").GetProperty("propertyToField").ToString());
            Console.WriteLine(result.GetProperty("propertyModelWithCustomizedProperties").GetProperty("badListName")[0].ToString());
            Console.WriteLine(result.GetProperty("propertyModelWithCustomizedProperties").GetProperty("badDictionaryName").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("propertyModelWithCustomizedProperties").GetProperty("badListOfListName")[0][0].ToString());
            Console.WriteLine(result.GetProperty("propertyModelWithCustomizedProperties").GetProperty("badListOfDictionaryName")[0].GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("propertyEnumToRename").ToString());
            Console.WriteLine(result.GetProperty("propertyEnumWithValueToRename").ToString());
            Console.WriteLine(result.GetProperty("propertyEnumToBeMadeExtensible").ToString());
            Console.WriteLine(result.GetProperty("propertyModelToAddAdditionalSerializableProperty").GetProperty("requiredInt").ToString());
            Console.WriteLine(result.GetProperty("propertyToMoveToCustomization").ToString());
        }
    }
}
