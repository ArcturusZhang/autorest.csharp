<?xml version="1.0" encoding="utf-8"?>
<doc>
  <members>
    <member name="CreateOrUpdateAsync(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call CreateOrUpdateAsync with required parameters and request content, and how to parse the result.
<code>Example_CreateOrUpdate_Async</code>
This sample shows how to call CreateOrUpdateAsync with all parameters and request content, and how to parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AuthoringTypeSpecClient client = new AuthoringTypeSpecClient(endpoint);

RequestContent content = RequestContent.Create(new Dictionary<string, object>()
{
    ["projectKind"] = "CustomSingleLabelClassification",
    ["storageInputContainerName"] = "<storageInputContainerName>",
    ["settings"] = new Dictionary<string, object>()
    {
        ["key"] = "<settings>",
    },
    ["multilingual"] = true,
    ["description"] = "<description>",
    ["language"] = "<language>",
});
Response response = await client.CreateOrUpdateAsync("<projectName>", content);
]]></code></example>
    </member>
    <member name="CreateOrUpdate(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call CreateOrUpdate with required parameters and request content, and how to parse the result.
<code>Example_CreateOrUpdate</code>
This sample shows how to call CreateOrUpdate with all parameters and request content, and how to parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AuthoringTypeSpecClient client = new AuthoringTypeSpecClient(endpoint);

RequestContent content = RequestContent.Create(new Dictionary<string, object>()
{
    ["projectKind"] = "CustomSingleLabelClassification",
    ["storageInputContainerName"] = "<storageInputContainerName>",
    ["settings"] = new Dictionary<string, object>()
    {
        ["key"] = "<settings>",
    },
    ["multilingual"] = true,
    ["description"] = "<description>",
    ["language"] = "<language>",
});
Response response = client.CreateOrUpdate("<projectName>", content);
]]></code></example>
    </member>
    <member name="GetProjectAsync(string,RequestContext)">
      <example>
This sample shows how to call GetProjectAsync with required parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AuthoringTypeSpecClient client = new AuthoringTypeSpecClient(endpoint);

Response response = await client.GetProjectAsync("<projectName>");
]]></code></example>
    </member>
    <member name="GetProject(string,RequestContext)">
      <example>
This sample shows how to call GetProject with required parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AuthoringTypeSpecClient client = new AuthoringTypeSpecClient(endpoint);

Response response = client.GetProject("<projectName>");
]]></code></example>
    </member>
    <member name="DeleteAsync(string,RequestContext)">
      <example>
This sample shows how to call DeleteAsync with required parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AuthoringTypeSpecClient client = new AuthoringTypeSpecClient(endpoint);

Response response = await client.DeleteAsync("<projectName>");
]]></code></example>
    </member>
    <member name="Delete(string,RequestContext)">
      <example>
This sample shows how to call Delete with required parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AuthoringTypeSpecClient client = new AuthoringTypeSpecClient(endpoint);

Response response = client.Delete("<projectName>");
]]></code></example>
    </member>
    <member name="ExportAsync(string,string,RequestContext)">
      <example>
This sample shows how to call ExportAsync with required parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AuthoringTypeSpecClient client = new AuthoringTypeSpecClient(endpoint);

Response response = await client.ExportAsync("<projectName>", "<projectFileVersion>");
]]></code></example>
    </member>
    <member name="Export(string,string,RequestContext)">
      <example>
This sample shows how to call Export with required parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AuthoringTypeSpecClient client = new AuthoringTypeSpecClient(endpoint);

Response response = client.Export("<projectName>", "<projectFileVersion>");
]]></code></example>
    </member>
    <member name="ImportxAsync(string,RequestContext)">
      <example>
This sample shows how to call ImportxAsync with required parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AuthoringTypeSpecClient client = new AuthoringTypeSpecClient(endpoint);

Response response = await client.ImportxAsync("<projectName>");
]]></code></example>
    </member>
    <member name="Importx(string,RequestContext)">
      <example>
This sample shows how to call Importx with required parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AuthoringTypeSpecClient client = new AuthoringTypeSpecClient(endpoint);

Response response = client.Importx("<projectName>");
]]></code></example>
    </member>
    <member name="TrainAsync(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call TrainAsync with required parameters and request content.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AuthoringTypeSpecClient client = new AuthoringTypeSpecClient(endpoint);

RequestContent content = RequestContent.Create(new Dictionary<string, object>()
{
    ["modelLabel"] = "<modelLabel>",
});
Response response = await client.TrainAsync("<projectName>", content);
]]></code></example>
    </member>
    <member name="Train(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call Train with required parameters and request content.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AuthoringTypeSpecClient client = new AuthoringTypeSpecClient(endpoint);

RequestContent content = RequestContent.Create(new Dictionary<string, object>()
{
    ["modelLabel"] = "<modelLabel>",
});
Response response = client.Train("<projectName>", content);
]]></code></example>
    </member>
    <member name="GetDeploymentAsync(string,string,RequestContext)">
      <example>
This sample shows how to call GetDeploymentAsync with required parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AuthoringTypeSpecClient client = new AuthoringTypeSpecClient(endpoint);

Response response = await client.GetDeploymentAsync("<projectName>", "<deploymentName>");
]]></code></example>
    </member>
    <member name="GetDeployment(string,string,RequestContext)">
      <example>
This sample shows how to call GetDeployment with required parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AuthoringTypeSpecClient client = new AuthoringTypeSpecClient(endpoint);

Response response = client.GetDeployment("<projectName>", "<deploymentName>");
]]></code></example>
    </member>
    <member name="DeployProjectAsync(string,string,RequestContent,RequestContext)">
      <example>
This sample shows how to call DeployProjectAsync with required parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AuthoringTypeSpecClient client = new AuthoringTypeSpecClient(endpoint);

RequestContent content = RequestContent.Create(new Dictionary<string, object>()
{
});
Response response = await client.DeployProjectAsync("<projectName>", "<deploymentName>", content);
]]></code></example>
    </member>
    <member name="DeployProject(string,string,RequestContent,RequestContext)">
      <example>
This sample shows how to call DeployProject with required parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AuthoringTypeSpecClient client = new AuthoringTypeSpecClient(endpoint);

RequestContent content = RequestContent.Create(new Dictionary<string, object>()
{
});
Response response = client.DeployProject("<projectName>", "<deploymentName>", content);
]]></code></example>
    </member>
    <member name="DeleteDeploymentAsync(string,string,RequestContext)">
      <example>
This sample shows how to call DeleteDeploymentAsync with required parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AuthoringTypeSpecClient client = new AuthoringTypeSpecClient(endpoint);

Response response = await client.DeleteDeploymentAsync("<projectName>", "<deploymentName>");
]]></code></example>
    </member>
    <member name="DeleteDeployment(string,string,RequestContext)">
      <example>
This sample shows how to call DeleteDeployment with required parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AuthoringTypeSpecClient client = new AuthoringTypeSpecClient(endpoint);

Response response = client.DeleteDeployment("<projectName>", "<deploymentName>");
]]></code></example>
    </member>
    <member name="SwapDeploymentsAsync(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call SwapDeploymentsAsync with required parameters and request content.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AuthoringTypeSpecClient client = new AuthoringTypeSpecClient(endpoint);

RequestContent content = RequestContent.Create(new Dictionary<string, object>()
{
    ["firstDeploymentName"] = "<firstDeploymentName>",
    ["secondDeploymentName"] = "<secondDeploymentName>",
});
Response response = await client.SwapDeploymentsAsync("<projectName>", content);
]]></code></example>
    </member>
    <member name="SwapDeployments(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call SwapDeployments with required parameters and request content.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AuthoringTypeSpecClient client = new AuthoringTypeSpecClient(endpoint);

RequestContent content = RequestContent.Create(new Dictionary<string, object>()
{
    ["firstDeploymentName"] = "<firstDeploymentName>",
    ["secondDeploymentName"] = "<secondDeploymentName>",
});
Response response = client.SwapDeployments("<projectName>", content);
]]></code></example>
    </member>
    <member name="GetDeploymentStatusAsync(string,string,string,CancellationToken)">
      <example>
This sample shows how to call GetDeploymentStatusAsync with required parameters.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new AuthoringTypeSpecClient(endpoint);

var result = await client.GetDeploymentStatusAsync("<projectName>", "<deploymentName>", "<jobId>");
]]></code></example>
    </member>
    <member name="GetDeploymentStatus(string,string,string,CancellationToken)">
      <example>
This sample shows how to call GetDeploymentStatus with required parameters.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new AuthoringTypeSpecClient(endpoint);

var result = client.GetDeploymentStatus("<projectName>", "<deploymentName>", "<jobId>");
]]></code></example>
    </member>
    <member name="GetDeploymentStatusAsync(string,string,string,RequestContext)">
      <example>
This sample shows how to call GetDeploymentStatusAsync with required parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AuthoringTypeSpecClient client = new AuthoringTypeSpecClient(endpoint);

Response response = await client.GetDeploymentStatusAsync("<projectName>", "<deploymentName>", "<jobId>", new RequestContext());
]]></code></example>
    </member>
    <member name="GetDeploymentStatus(string,string,string,RequestContext)">
      <example>
This sample shows how to call GetDeploymentStatus with required parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AuthoringTypeSpecClient client = new AuthoringTypeSpecClient(endpoint);

Response response = client.GetDeploymentStatus("<projectName>", "<deploymentName>", "<jobId>", new RequestContext());
]]></code></example>
    </member>
    <member name="GetSwapDeploymentsStatusAsync(string,string,string,CancellationToken)">
      <example>
This sample shows how to call GetSwapDeploymentsStatusAsync with required parameters.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new AuthoringTypeSpecClient(endpoint);

var result = await client.GetSwapDeploymentsStatusAsync("<projectName>", "<deploymentName>", "<jobId>");
]]></code></example>
    </member>
    <member name="GetSwapDeploymentsStatus(string,string,string,CancellationToken)">
      <example>
This sample shows how to call GetSwapDeploymentsStatus with required parameters.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new AuthoringTypeSpecClient(endpoint);

var result = client.GetSwapDeploymentsStatus("<projectName>", "<deploymentName>", "<jobId>");
]]></code></example>
    </member>
    <member name="GetSwapDeploymentsStatusAsync(string,string,string,RequestContext)">
      <example>
This sample shows how to call GetSwapDeploymentsStatusAsync with required parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AuthoringTypeSpecClient client = new AuthoringTypeSpecClient(endpoint);

Response response = await client.GetSwapDeploymentsStatusAsync("<projectName>", "<deploymentName>", "<jobId>", new RequestContext());
]]></code></example>
    </member>
    <member name="GetSwapDeploymentsStatus(string,string,string,RequestContext)">
      <example>
This sample shows how to call GetSwapDeploymentsStatus with required parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AuthoringTypeSpecClient client = new AuthoringTypeSpecClient(endpoint);

Response response = client.GetSwapDeploymentsStatus("<projectName>", "<deploymentName>", "<jobId>", new RequestContext());
]]></code></example>
    </member>
    <member name="GetProjectsAsync(RequestContext)">
      <example>
This sample shows how to call GetProjectsAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AuthoringTypeSpecClient client = new AuthoringTypeSpecClient(endpoint);
]]></code></example>
    </member>
    <member name="GetProjects(RequestContext)">
      <example>
This sample shows how to call GetProjects and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AuthoringTypeSpecClient client = new AuthoringTypeSpecClient(endpoint);
]]></code></example>
    </member>
    <member name="GetDeploymentsAsync(string,RequestContext)">
      <example>
This sample shows how to call GetDeploymentsAsync with required parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AuthoringTypeSpecClient client = new AuthoringTypeSpecClient(endpoint);
]]></code></example>
    </member>
    <member name="GetDeployments(string,RequestContext)">
      <example>
This sample shows how to call GetDeployments with required parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AuthoringTypeSpecClient client = new AuthoringTypeSpecClient(endpoint);
]]></code></example>
    </member>
    <member name="GetSupportedLanguagesAsync(int?,int?,int?,RequestContext)">
      <example>
This sample shows how to call GetSupportedLanguagesAsync and parse the result.
<code>Example_GetSupportedLanguages_Async</code>
This sample shows how to call GetSupportedLanguagesAsync with all parameters, and how to parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AuthoringTypeSpecClient client = new AuthoringTypeSpecClient(endpoint);
]]></code></example>
    </member>
    <member name="GetSupportedLanguages(int?,int?,int?,RequestContext)">
      <example>
This sample shows how to call GetSupportedLanguages and parse the result.
<code>Example_GetSupportedLanguages</code>
This sample shows how to call GetSupportedLanguages with all parameters, and how to parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AuthoringTypeSpecClient client = new AuthoringTypeSpecClient(endpoint);
]]></code></example>
    </member>
    <member name="GetTrainingConfigVersionsAsync(int?,int?,int?,RequestContext)">
      <example>
This sample shows how to call GetTrainingConfigVersionsAsync and parse the result.
<code>Example_GetTrainingConfigVersions_Async</code>
This sample shows how to call GetTrainingConfigVersionsAsync with all parameters, and how to parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AuthoringTypeSpecClient client = new AuthoringTypeSpecClient(endpoint);
]]></code></example>
    </member>
    <member name="GetTrainingConfigVersions(int?,int?,int?,RequestContext)">
      <example>
This sample shows how to call GetTrainingConfigVersions and parse the result.
<code>Example_GetTrainingConfigVersions</code>
This sample shows how to call GetTrainingConfigVersions with all parameters, and how to parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AuthoringTypeSpecClient client = new AuthoringTypeSpecClient(endpoint);
]]></code></example>
    </member>
  </members>
</doc>